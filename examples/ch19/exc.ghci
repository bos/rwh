--# try1
:m Control.Exception
let x = 5 `div` 0
let y = 5 `div` 1
print x
print y
try (print x)
try (print y)
--# try2
result <- try (return x)
--# try3
let z = undefined
try (print z)
result <- try (return z)
--# try4
let z = undefined
result <- try (evaluate z)
result <- try (evaluate x)
--# handle1
:m Control.Exception
let x = 5 `div` 0
let y = 5 `div` 1
handle (\_ -> putStrLn "Error calculating result") (print x)
handle (\_ -> putStrLn "Error calculating result") (print y)
--# handleJust1
:l hj1.hs
let x = 5 `div` 0
let y = 5 `div` 1
safePrint x
safePrint y
--# handleJust2
:l hj2.hs
let x = 5 `div` 0
let y = 5 `div` 1
safePrint x
safePrint y
