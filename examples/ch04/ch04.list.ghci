--# null

:type null
null []
null "plugh"

--# length

:type length
length []
length [1,2,3]

--# head

:type head
head [1,2,3]

--# tail

:type tail
tail "foo"

--# last

:type last
last "bar"

--# head.empty

head []

--# append

:type (++)
"foo" ++ "bar"
[] ++ [1,2,3]
[True] ++ []

--# concat

:type concat
concat [[1,2,3], [4,5,6]]

--# concat.multi

concat [[[1,2],[3]], [[4],[5],[6]]]
concat (concat [[[1,2],[3]], [[4],[5],[6]]])

--# reverse

:type reverse
reverse "foo"

--# and.or

:type and
and [True,False,True]
and []
:type or
or [False,False,False,True,False]
or []

--# all.any

:type all
all odd [1,3,5]
all odd [3,1,4,1,5,9,2,6,5]
all odd []
:type any
any even [3,1,4,1,5,9,2,6,5]
any even []

--# take.drop

:type take
take 3 "foobar"
take 2 [1]
:type drop
drop 3 "xyzzy"
drop 1 []

--# splitAt

:type splitAt

splitAt 3 "foobar"

--# takeWhile.dropWhile

:type takeWhile
takeWhile odd [1,3,5,6,8]
:type dropWhile
dropWhile even [2,4,6,7,9]

--# break.span

:type break
break even [1,3,5,6,8]
:type span
span even [2,4,6,7,9]

--# Data.List

:module +Data.List

--# isPrefixOf

:type isPrefixOf
"foo" `isPrefixOf` "foobar"
[1,2] `isPrefixOf` []

--# isInfixOf

[2,6] `isInfixOf` [3,1,4,1,5,9,2,6,5,3,5,8,9,7,9]
"funk" `isInfixOf` "sonic youth"

--# isSuffixOf

".c" `isSuffixOf` "crashme.c"
