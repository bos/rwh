<!-- vim: set filetype=docbkxml shiftwidth=2 autoindent expandtab tw=77 : -->

<chapter id="hs.funcstypes">
  <title>Types and Functions</title>

  <para>Topics: built-in types.  Writing functions.  Creating new
    types.</para>

  <sect1>
    <title>Haskell's type system</title>
    
    <para><quote>Haskell has a strong, static type system with
	inference.</quote> For a short sentence, this one gives us a
      lot for us to pore over.  Because Haskell is quite different
      from mainstream programming languages in how it treats types,
      let's not assume too much shared understanding as we talk about
      types.</para>

    <para>Every value and expression in Haskell has a
      <emphasis>type</emphasis>.  The type of a value indicates that
      it shares certain properties with other values that have the
      same type.  (You'll see us refer to a value <quote>having the
	type <code>X</code></quote>, or <quote>being of type
	<code>X</code></quote>.  The two phrases mean the same thing.)
      All values that have the type <type>Integer</type> have the
      ability to be added to other values of type
      <type>Integer</type>, and so on.</para>

    <para>Haskell has a <quote>strong</quote> type system, in which
      every expression and value has exactly one type.  Another aspect
      of Haskell's view of strong typing is that it will not
      automatically convert values from one type to another, a feature
      present in some other languages.</para>

    <note>
      <para>Conversations about type systems can lead to many a
	misunderstanding among programmers.  Some people say that C
	has a strong type system; others claim that Python does.
	Haskell programmers think strong typing is still something
	else.</para>

      <para>Since there's no universally agreed upon meaning for the
	phrase <quote>strong type</quote>,  it's best not to assume
	that someone else shares the same notion of it as you do.  (We
	also suggest that putting forth one definition as better than
	another doesn't often lead to enlightened discussion.)</para>
    </note>

    <para>Having a <quote>static</quote> type system means that the
      compiler knows the type of every value and expression at compile
      time, before any code is ever executed.  A Haskell compiler or
      interpreter will detect when we try to use types inconsistently
      in our code, and reject the code with an error message.</para>

    &ch03.basics.ghci:error;

    <para>Haskell's combination of strong and static typing also makes
      it impossible for type errors to occur at runtime.</para>

    <para>Finally, <quote>type inference</quote> means what it says:
      the compiler can automatically figure out the types of most
      values for us, so that we don't have to explicitly label
      them.</para>

    <para>We've already briefly seen Haskell's notation for types in
      <xref linkend="hs.starting.types"/>.  We write <code>expression
	:: <type>MyType</type></code> to say that
      <code>expression</code> has the type <type>MyType</type>.</para>
  </sect1>

  <sect1>
    <title>Some common basic types</title>
    
    <para>We've already encountered a few types in <xref
	linkend="hs.starting.types"/>.  Haskell has a number of
      built-in types that we'll use over and over.  Here are some of
      the language's basic types, types that aren't composed of other
      types</para>

    <itemizedlist>
      <listitem>
	<para>The <type>Char</type> type represents a character. The
	  values of <type>Char</type> are drawn from the Unicode
	  character set, which covers most of the world's written
	  languages.</para>
      </listitem>
      <listitem>
	<para>The <type>Bool</type> type represents a value in Boolean
	  logic.  The possible values of <type>Bool</type> are
	  <code>True</code> and <code>False</code>.</para>
      </listitem>
      <listitem>
	<para>The <type>Int</type> type represents a signed,
	  fixed-width integer.  The exact range of values represented
	  by <type>Int</type> depends on the system's longest
	  <quote>native</quote> integer: on a 32-bit machine, an
	  <type>Int</type> is usually 32 bits wide, while on a 64-bit
	  machine, it is usually 64 bits wide.</para>
      </listitem>
      <listitem>
	<para>The <type>Integer</type> type represents a signed
	  integer of arbitrary size.  <type>Integer</type>s are not
	  used as often as <type>Int</type>s, because they're a lot
	  more expensive to work with.</para>
      </listitem>
      <listitem>
	<para>The <type>Double</type> type is the type usually used to
	  represent floating point numbers.  It is typically 64 bits
	  wide, and uses the machine's native floating point
	  representation.  (A narrower type, <type>Float</type>, also
	  exists, but its use is discouraged; Haskell compiler writers
	  concentrate more on making <type>Double</type>
	  efficient.)</para>
      </listitem>
    </itemizedlist>
  </sect1>

  <sect1>
    <title>Useful composite data types: lists and tuples</title>

    <para>The most common composite data types in Haskell are the list
      and tuple.</para>

    <para>We've already seen the list type mentioned in <xref
	linkend="hs.starting.string"/>, where we found that Haskell
      represents a text string as a list of <type>Char</type> values,
      and that the type <quote>list of <type>Char</type></quote> is
      written <type>[Char]</type>.</para>

    <para>More generally, we can write the type <quote>list of
	<varname role="type">a</varname></quote> for any type <varname
	role="type">a</varname> by enclosing <varname
	role="type">a</varname> in square brackets, <type>[a]</type>.
      Lists are strongly typed: a list of one type has an identity of
      its own, distinct from a list of another type. The type
      <type>[Int]</type> is a list that can only contain values of
      type <type>Int</type>, for example.</para>

    <para>Lists are the <quote>bread and butter</quote> of Haskell
      collections.  Whereas in an imperative language, we might repeat
      a task over many items by iterating through a loop, this is
      something that we tend to do in Haskell by recursing over a
      list.</para>

    <para>A tuple is a fixed-size collection of values, each of which
      can be of any type.  Unlike a list (the elements of which must
      all have the same type), there's no need for the elements of a
      tuple to have related types.  We write a tuple by enclosing its
      elements in parentheses and separating them with commas.  We use
      the same notation for writing its type.</para>

    &tuple.ghci:tuple;

    <para>We can construct a tuple with any number of elements
      (although in practice, a tuple with more than a handful becomes
      unwieldy).  A tuple's type encodes the number and types of its
      elements in its own type.  This means that tuples containing
      different numbers or types of elements have distinct types of
      their own.</para>

    &tuple.ghci:type;

    <para>A two-tuple of an <type>Int</type> and a <type>String</type>
      has a different type than a two-tuple of a <type>Bool</type> and
      a <type>Bool</type>, for example, and a three-tuple has a
      different type than a four-tuple.</para>

    <para>Probably the most common use of tuples is to let us return
      multiple values from a function.  We can also use them in other
      places where we want a fixed-size collection of values, for
      which the kind of container we're using isn't of much
      importance.  An example of this might be to represent a row
      in the result of a a database query.</para>
  </sect1>

  <sect1>
    <title>Calling functions</title>

    <para>Now that we've had our fill of data types for a while, let's
      turn our attention to <emphasis>working</emphasis> with some of
      the types we've seen.  We've already seen how to perform
      arithmetic in <xref linkend="hs.starting.arithmetic"/>, and it
      looks quite as it does in other languages.</para>

    <para>However, our discussion of lists and tuples mentioned how we
      can construct them, but not how we do anything with them
      afterwards.  Haskell defines a large library of functions for
      working with lists and (to a lesser extent) tuples, so let's
      find out how to use a few of those functions.</para>

    <para>To call a function in Haskell, we provide the name of the
      function followed by its arguments, all separated by whitespace.
      As an example, let's call the <function>head</function>
      function, which returns the first element of a list.</para>

    &func.ghci:head;

    <para>Its counterpart, <function>tail</function>, returns all
      <emphasis>but</emphasis> the head of a list.</para>

    &func.ghci:tail;

    <para>A related pair of functions, <function>take</function> and
      <function>drop</function>, take two arguments: given a number
      and a list, they return either the first, or all but the first,
      number of elements of the list.  (Here, remember that a
      <type>String</type> is a list of <type>Char</type>.)</para>

    &func.ghci:takeDrop;

    <para>If you're used to function call syntax in other languages,
      this notation can take a little getting used to, but it's
      undeniably simple and uniform.  Here's what we mean by
      uniform.</para>

    &func.ghci:snd;

    <para>In some other languages, the call to
      <function>snd</function> above might mean <quote>call
	<function>snd</function> with two arguments,
	<literal>1</literal> and <literal>2</literal></quote>, but in
      Haskell, it's a single-argument call, passing the tuple
      <literal>(1,2)</literal>.</para>

    <para>By the way, <function>snd</function> has a companion
      function, <function>fst</function>, which returns the first
      element of a tuple.</para>

    &func.ghci:fst;

    <sect2>
      <title>Passing an expression to a function</title>

      <para>Haskell evaluates an expression from left to right.  If we
	want to use the result of one expression as an argument to
	another, we have to keep this in mind and use parentheses to
	tell the parser what we really mean.  Here's an
	example.</para>

      &func.ghci:headDrop;

      <para>We can read this as <quote>pass the result of the
	  expression <code>drop 4 "azerty"</code> as the argument to
	  <function>head</function></quote>.  If we were to leave out
	the parentheses, Haskell would instead interpret the
	expression as <quote>pass <function>drop</function> as the
	  argument to <function>head</function></quote>.  Compilation
	would fail with a type error, as <function>drop</function> is
	a function, not a list.</para>
    </sect2>
  </sect1>

  <sect1>
    <title>Understanding a function's type signature</title>

    <para>A consequence of Haskell's strong typing is that
      <function>fst</function> and <function>snd</function> only
      accept two-tuples as arguments.  Let's see what &ghci; tells us
      about their types.</para>

    &func.ghci:fst.type;

    <para>We can read the <literal>-&gt;</literal> above as
      <quote>returns</quote>.  The entire signature thus tells us that
      <function>fst</function> takes any two-tuple whose elements are
      of types <varname role="type">a</varname> and <varname
	role="type">b</varname> (each of which can be of any type),
      and returns a value with type <varname role="type">a</varname>.
      Sure enough, if we try calling <function>fst</function> with a
      three-tuple, things don't go so well.</para>

    &func.ghci:fst.bad;

    <para>Notice that the type signatures above give us a strong hint
      as to what these functions might actually
      <emphasis>do</emphasis>. This is an incredibly valuable property
      of types in a functional language.  Since there aren't usually
      any side effects for us to worry about, figuring what a function
      does can often be a matter of reading its name and understanding
      its type signature, with no <quote>regular documentation</quote>
      required.</para>

    <para>So far, we haven't seen a signature for a function that
      takes <emphasis>more</emphasis> than one argument.  We've
      already encountered a few such functions; let's look at
      <function>take</function>.</para>

    &func.ghci:take.type;

    <para>It's pretty clear that there's something going on with an
      <type>Int</type> and some lists, but why are there two
      <literal>-&gt;</literal> symbols in the signature?  Haskell
      parses these from right to left.  If we introduce parentheses,
      it makes it clearer how Haskell is interpreting this type
      signature.</para>

    &Take.hs:type;

    <para>From this, it looks like we ought to read the type signature
      as a function that takes one argument, an <type>Int</type>, and
      returns another function.  That other function also takes one
      argument, a list, and returns a list of the same type as its
      argument.</para>

    <para>This is an intriguing idea, but it's not easy to see just
      yet what its consequences might be.  We'll return to this topic
      soon, once we've spent a bit of time writing functions.</para>

  </sect1>

  <sect1>
    <title>Haskell source files, and writing simple functions</title>

    <para>Now that we know how to call functions, it's time we turned
      our attention to writing them.  While we can write functions in
      &ghci;, it's not a good environment for doing so, because it
      limits any expression or definition to one line in length.  So
      instead, we'll finally break down and create a source
      file.</para>

    <para>Haskell source files are usually identified with a suffix of
      <filename>.hs</filename>.  Here's a simple function definition:
      open up a file named <filename>add.hs</filename>, and add these
      contents to it.</para>

    &add.hs:add;

    <para>On the left hand side of the <literal>=</literal> is the
      name of the function, followed by the arguments to the function.
      On the right hand side is the body of the function.  With our
      source file saved, we can load it into &ghci;, and use our new
      <function>add</function> function straight away.</para>

    &add.ghci:add;

    <para>When we call <function>add</function>, the variables
      <varname>a</varname> and <varname>b</varname> on the left hand
      side of our definition are given (or <quote>bound to</quote>)
      the values <literal>1</literal> and <literal>2</literal>, then
      the right hand side is evaluated, and the result
      returned.</para>

    <para>Haskell doesn't need a <command>return</command> statement;
      the result of a function is the result of evaluating whatever
      expression is in the function's body.</para>

    <sect2>
      <title>Conditional evaluation</title>

      <para>Like other languages, Haskell has an <code>if</code>
	expression.  Let's see it in action: we'll write our own
	version of the standard <function>take</function> function.
	Before we do so, let's probe a little bit of how
	<function>take</function> behaves.</para>

      &myTake.ghci:take;

      <para>From the above, it seems that <function>take</function>
	removes at most the given number of elements from the front of
	a list (it returns the empty list if the number to remove is
	greater than the number of elements), and that it treats
	negative numbers as zero.</para>

      <para>Here's a <function>myTake</function> function that has the
	same behaviour as <function>take</function>, and uses
	Haskell's <code>if</code> expression.</para>

      &myTake.hs:myTake;

      <para>Let's save it in a file named
	<filename>myTake.hs</filename>, then load it into
	&ghci;.</para>

      &myTake.ghci:myTake;

      <para>Now that we've seen <function>myTake</function> in action,
	let's return to the source code and look at a few of the
	novelties we've introduced.</para>

      <para>First is the <code>if</code> keyword itself.  It takes an
	expression of type <type>Bool</type>.  If that evaluates to
	<function>True</function>, it evaluates the expression on the
	<code>then</code> branch.  Otherwise, it evaluates the
	expression on the <code>else</code> branch.</para>

      <para>The combination of <code>if</code>, <code>then</code>,
	<code>else</code> and the expression after each keyword
	combine to make up a single expression, as far as Haskell is
	concerned.  Whichever branch is evaluated is the result of the
	<code>if</code>.  Because an expression can only have one
	type, the expressions in the <code>then</code> and
	<code>else</code> branches must have the same type.  If they
	don't, an <code>if</code> expression won't typecheck.</para>

      <para>Whereas it can make sense in an imperative language to
	omit the <code>else</code> branch from an <code>if</code>,
	this would be nonsensical in Haskell.  An <code>if</code>
	expression that was missing an <code>else</code> couldn't
	typecheck, since it would sometimes have a value and sometimes
	not.</para>

      <para>The second novelty is almost trivial: the
	<function>null</function> function, which we use in the
	Boolean portion of the <code>if</code>, indicates whether a
	list is empty.</para>

      &myTake.ghci:null;

      <para>Finally, our <code>if</code> expression spans several
	lines.  We line the <code>then</code> and <code>else</code>
	branches up under the <code>if</code> for neatness, but this
	is not mandatory.  We could put all of them on a single line,
	for example, but this is harder to read.</para>

      &myTake.hs:myTake2;

      <remark>XXX Make a forward reference to discussion of the layout
	rule.</remark>

    </sect2>
  </sect1>

  <sect1>
    <title>Defining a new data type</title>
      
    <para>Although lists and tuples are useful, we'll still often want
      to construct new data types of our own.  We define a new data
      type using the <code>data</code> keyword.</para>

    &MyType.hs:MyType;

    <para>The <type>MyType</type> after the <code>data</code> keyword
      is the name of our new type.  (As we've already mentioned, a
      type name must start with a capital letter.)  The string
      <code>MyConstructor</code> is the name of the
      <emphasis>constructor</emphasis> we'll call to create a value of
      this type.  (As with a type name, a constructor name must start
      with a capital letter.)  Finally, the <type>Int</type> and
      <type>String</type> are the <emphasis>components</emphasis> of
      the type.  A component serves the same purpose in Haskell as a
      field in a structure or class would in another language.</para>

    <note>
      <para>We'll explain the full meaning of <code>deriving
	  (Show)</code> later, in
	<xref linkend="hs.typeclasses.wellknown.show"/>.  For now,
	it's enough to know that we need to tack this onto a type
	declaration so that &ghci; will automatically know how to
	print a value of this type.</para>
    </note>

    <para>We can create a new value of type <type>MyType</type> by
      treating <function>MyConstructor</function> as a function, and
      calling it with arguments of types <type>Int</type> and
      <type>String</type>.</para>

    &MyType.hs:myValue;

    <para>Once we've defined a type, we can experiment with it in
      &ghci;, starting by using the <command>:load</command> command
      to load our source file.</para>

    &mytype.ghci:load;

    <para>Remember the <code>myValue</code> variable we defined?  Here
      it is.</para>

    &mytype.ghci:myValue;

    <para>We can construct new values interactively in &ghci;,
      too.</para>

    &mytype.ghci:newValue;

    <para>To find out more about a type, we can use some of &ghci;'s
      browsing capabilities.  The <command>:info</command> command
      gets &ghci; to tell us us everything it knows about a
      type.</para>
    
    &mytype.ghci:info;

    <para>We can also find out why we use
      <function>MyConstructor</function> to construct a new value of
      type <type>MyType</type>.</para>

    &mytype.ghci:type;

    <para>From Haskell's perspective, then, a constructor is just
      another function, one that happens to return a value of the type
      we want to construct.</para>
  </sect1>
  <sect1>
    <title>Algebraic data types</title>

    <para>The <type>Bool</type> type that we introduced earlier is the
      simplest example of a sort of type called an <emphasis>algebraic
	data type</emphasis>. An algebraic data type has a fixed set
      of possible values, each of which is identified by a distinct
      constructor.</para>

    <para>In the case of <type>Bool</type>, the type has two
      constructors, <code>True</code> and <code>False</code>.  Each
      constructor is separated by a <literal>|</literal> character,
      which we can read as <quote>or</quote>.  These are usually
      referred to as alternatives or cases.</para>

      &Bool.hs:Bool;

    <para>Each constructor can take zero or more arguments; the
      numbers and types of the arguments accepted by each constructor
      are independent.  For example, here's one way we might represent
      versions of the Windows operating system, where old releases
      were monolithic, and newer releases have <quote>service pack
	levels</quote> denoting major updates after their initial
      releases.</para>

      &OsVersion.hs:WindowsVersion;

    <para>The alternatives that represent older releases don't need
      arguments, but those for the newer releases need an
      <type>Int</type> to represent the patch level.</para>

    <sect2>
      <title>Analogues to algebraic data types in other
	languages</title>

      <para>Algebraic data types provide a single structuring
	mechanism in instances where other languages have several
	different building blocks.  Here are some analogues from C and
	C++, which might make it clearer what we can do with algebraic
	data types.</para>

      <para>With just one constructor, an algebraic data type groups
	related values into one, and gives that value an identity
	distinct from other types.  It corresponds to a
	<code>struct</code> in C or C++, and its components to the
	fields of a struct.</para>

      <para>If an algebraic data type has multiple alternatives, we
	can think of it as similar to a <code>union</code> in C or
	C++.  A big difference between the two is that a union doesn't
	tell us which alternative is actually present; we have to
	record which alternative we're using ourselves, usually in
	another field of a struct.  This means that unions can
	sometimes be sources of bugs, where our notion of which
	alternative we should be using is incorrect.</para>

      <para>With an algebraic data type, Haskell stores the
	constructor that we use in the value that we create, so we
	don't need to manually sock it away somewhere else.</para>

      <para>Algebraic data types also serve where we'd use an
	<code>enum</code> in C or C++, to represent a range of
	discrete symbolic values.</para>

      &Enum.hs:Roygbiv;

    </sect2>

    <sect2>
      <title>A few final notes</title>

      <para>From reading the preceding sections, it should be clear
	that <emphasis>all</emphasis> of the data types that we define
	with the <code>data</code> keyword are algebraic data types.
	Some may have just one alternative; others have several; but
	they're all using the same organising machinery.</para>

      <para>Another useful thing to know is that it's perfectly okay
	for the name of an algebraic type to have the same name as one
	of its constructors to be the same.  It's always obvious from
	context whether we're using a name to refer to a type or a
	constructor, so this doesn't introduce any ambiguity.</para>

      <para>Giving a type and its constructor the same name is in fact
	something that we do frequently when the type has just one
	constructor.</para>

      &TypeName.hs:PerfectlyNormal;

      <para>When a type has multiple constructors, it's still legal to
	give one of the constructors the  same name as the type, but
	this is much less common.</para>

      &TypeName.hs:LegalButWeird;

    </sect2>
  </sect1>

  <sect1>
    <title>Parameterised types</title>

    <para>In our discussion of lists, we mentioned that we can create
      a list of values of any type.  We can define our own types that
      allow this, too.  To do this, we introduce variables into a type
      declaration.</para>

      &Wrapper.hs:Wrapper;

    <para>Here, the variable <varname role="type">a</varname> is not a
      regular variable; it's called a <emphasis>type
	variable</emphasis>, because it indicates that our
      <type>Wrapper</type> type takes another type as its parameter
      (hence calling it a parameterised type). What this lets us do is
      use <type>Wrapper</type> on values of any type.</para>

      &Wrapper.hs:wrappedTypes;

    <para>As usual, we can load our source file into &ghci; and
      experiment with it.</para>

      &wrapper.ghci:experiment;

    <para><type>Wrapper</type> is a <quote>generic</quote> container
      type (albeit a fairly useless one); we can construct a
      <type>Wrapper</type> from a value of any type.  It is also
      strongly typed; the type of whatever it contains is encoded in
      its own type.</para>

    <para>To once again extend an analogy to more familiar languages,
      this gives us a facility that bears some resemblance to
      templates in C++, and to generics in Java.  (In fact, Java's
      generics facility was inspired by several aspects of Haskell's
      type system.)</para>

    <para>We can nest uses of parameterised types inside each other,
      but when we do, we may need to use parentheses to tell the
      Haskell compiler what we mean.</para>

      &Wrapper.hs:parens;
  </sect1>

  <sect1>
    <title>Recursive types</title>

    <para>Here's a definition of a binary tree type.</para>

      &Tree.hs:Tree;

    <para>We call this a <emphasis>recursive</emphasis> type because
      <type>Tree</type>, the type we're defining, appears both on the
      left hand side and the right hand side of the definition: we
      define the type in terms of itself.</para>
  </sect1>

  <sect1>
    <title>A little more about lists</title>

    <para>Now that we're getting familiar with some of the jargon
      around types, we can revisit lists.  Haskell's list type is a
      parameterised type, because we can make lists of any other type.
      It is also an algebraic data type, with two constructors.  One
      is the empty list, written <code>[]</code> (sometimes pronounced
      <quote>nil</quote>, which is borrowed from Lisp).</para>

    &list.ghci:empty;

    <para>The other is the <function>(:)</function> operator, often
      pronounced <quote>cons</quote> (this is short for
      <quote>construct</quote>, and also borrowed from Lisp).  The
      <function>(:)</function> operator takes an element and a list,
      and constructs a new list.</para>

    &list.ghci:cons;

    <para>We can use <function>(:)</function> repeatedly to add new
      elements to the front of a list.</para>

    &list.ghci:cons2;

    <para>The right hand side of <function>(:)</function> must be a
      list, and of the correct type.  If it's not, we'll get an
      error.</para>

    &list.ghci:cons.bad;

    <para>Because <function>(:)</function> constructs a list from
      another list, the list type is recursive.  So here we have a
      built-in type that's parameterised, recursive, and
      algebraic.</para>

    <para>One consequence of lists being generic is that lists of
      lists, for example, aren't special in any way.</para>

    &list.ghci:listlist;

    <para>This has type <type>[[String]]</type>, a list of lists of
      strings.  But since <type>String</type> is just a synonym for
      <type>[Char]</type>, it's <emphasis>really</emphasis> a list of
      lists of lists of <type>Char</type>.  Whew!</para>
  </sect1>

  <sect1>
    <title>Unit, the zero-element tuple</title>

    <para>Haskell has a special tuple type with no elements, written
      <type>()</type>, and pronounced <quote>unit</quote>.</para>

    &unit.ghci:unit;

    <para>This type is only really used with parameterised data types,
      to indicate that one of the type parameters isn't being used.
      Since it doesn't encode any information, it's a rough equivalent
      to <code>void</code> in C.</para>

    <para>Here's an example of <type>()</type> in use.  We can
      generalise our earlier <type>Tree</type> type a little, so that
      internal nodes contain values of type <varname
	role="type">a</varname>, while leaves contain values of type
      <varname role="type">b</varname>.</para>

    &Tree.hs:ComplexTree;

    <para>If we wanted to create a <type>ComplexTree</type> where we
      wanted to store <type>Int</type>s on the leaves, but don't care
      about the internal nodes.  We would write its type as
      <type>ComplexTree () Int</type>.</para>
  </sect1>

  <sect1 id="hs.funcstypes.strong">
    <title>Strong and Static Typing With Inference</title>
    <remark>FIXME</remark>
    <para>See also <xref linkend="hs.funcstypes.inference"/>.</para>
  </sect1>

  <sect1 id="hs.funcstypes.patternmatching">
    <title>Pattern Matching</title>

    <remark>FIXME: Introduce pattern matching.  Show how to write a
      function as a series of clauses, each predicated on its
      patterns.
    </remark>
  </sect1>

  <sect1 id="hs.funcstypes.basictypes">
    <title>Basic Types</title>
    <remark>FIXME: Type basics: products (tuples), sums
      (Maybe,Either), recursive types (lists). Give us enough glue to
      pattern match on.
    </remark>
  </sect1>

  <sect1 id="hs.funcstypes.guards">
    <title>Guards</title>
    <remark>FIXME:   Introduce guards.  Show that guards and patterns
      can be used together or independently.
    </remark>
  </sect1>

  <sect1 id="hs.funcstypes.ifcase">
    <title>Conditionals: if and case</title>
    <remark>FIXME</remark>
  </sect1>

  <sect1 id="hs.funcstypes.local">
    <title>Local definitions: let and where</title>
    <remark>FIXME</remark>
  </sect1>

  <sect1 id="hs.funcstypes.recursion">
    <title>Recursion</title>
    <remark>FIXME</remark>
  </sect1>

  <sect1 id="hs.funcstypes.rle">
    <title>Example: Run-Length Encoding</title>
    <remark>FIXME:   Example: run-length encoding.  Use to show how
      looping can be done via tail recursion.
    </remark>
  </sect1>

  <sect1 id="hs.funcstypes.infix">
    <title>Infix Functions</title>
    <remark>FIXME:  Infix functions.  Using and defining them, and
      infix use of normal functions.
    </remark>
  </sect1>

  <sect1 id="hs.funcstypes.inference">
    <title>Type Inference</title>
    <remark>FIXME: Discuss type inference: what it is and how it can
      save a lot of work.
    </remark>
  </sect1>

  <sect1 id="hs.funcstypes.anonymous">
    <title>Anonymous (Lambda) Functions</title>
    <remark>FIXME</remark>
  </sect1>

  <sect1 id="hs.funcstypes.partialapp">
    <title>Partial Application</title>
    <remark>FIXME</remark>
  </sect1>

  <sect1 id="hs.funcstypes.typeclasses">
    <title>Typeclasses</title>
    <remark>FIXME: Introduce type classes.  Show how ghci infers types
      with constraints. Define some functions that use type class
      constraints. Talk about when it's appropriate to write explicit
      signatures. 
    </remark>
    <para>See also <xref linkend="hs.typeclasses"/>.</para>
  </sect1>

  <sect1 id="hs.funcstypes.mapapi">
    <title>Example: Data.Map API</title>
    <remark>FIXME: Small example would be a finite map data structure
      API, with a list and tree implementation (different complexity,
      same api). Ties together basic types, small functions, top level
      functions. class Map m where new     :: m k v insert  :: k -> v
      -> m k v -> m k v lookup  :: k -> m k v -> v -- simple, O(n)
      data Map1 k v = [(k,v)] -- less simple, O(log n) data Map2 k v =
      Node k v (Map2 k v) (Map2 k v) | Empty

    </remark>
  </sect1>

</chapter>
<!--
local variables: 
sgml-parent-document: ("00book.xml" "chapter")
end:
-->
