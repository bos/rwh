<!-- vim: set filetype=docbkxml shiftwidth=2 autoindent expandtab tw=77 : -->

<chapter id="fp">
  <title>Functional programming</title>

  <sect1 id="fp.thinking">
    <title>Thinking in Haskell</title>

    <para id="x_V6">Our early learning of Haskell has two distinct
      aspects.  The first is coming to terms with the shift in mindset
      from imperative programming to functional: we have to replace
      our programming habits from other languages.  We do this not
      because imperative techniques are bad, but because in a
      functional language other techniques work better.</para>

    <para id="x_W6">Our second challenge is learning our way around
      the standard Haskell libraries.  As in any language, the
      libraries act as a lever, enabling us to multiply our problem
      solving power. Haskell libraries tend to operate at a higher
      level of abstraction than those in many other languages.  We'll
      need to work a little harder to learn to use the libraries, but
      in exchange they offer a lot of power.</para>

    <para id="x_X6">In this chapter, we'll introduce a number of common
      functional programming techniques.  We'll draw upon examples
      from imperative languages to highlight the shift in thinking
      that we'll need to make.  As we do so, we'll walk through some
      of the fundamentals of Haskell's standard libraries.  We'll also
      intermittently cover a few more language features along the
      way.</para>
  </sect1>

  <sect1 id="fp.framework">
    <title>A simple command line framework</title>

    <para id="x_VC1">In most of this chapter, we will concern ourselves with code
      that has no interaction with the outside world.  To maintain our
      focus on practical code, we will begin by developing a gateway
      between our <quote>pure</quote> code and the outside world. Our
      framework simply reads the contents of one file, applies a
      function to the file, and writes the result to another
      file.</para>

    &InteractWith.hs:main;

    <para id="x_WC1">This is all we need to write simple, but complete, file
      processing programs.  This is a complete program.  We can
      compile it to an executable named
      <filename>InteractWith</filename> as follows.</para>

    <screen><prompt>$</prompt> <userinput>ghc --make InteractWith</userinput>
[1 of 1] Compiling Main             ( InteractWith.hs, InteractWith.o )
Linking InteractWith ...</screen>

    <para id="x_XC1">If we run this program from the shell or command prompt, it
      will accept two file names: the name of a file to read, and the
      name of a file to write.</para>

    <screen><prompt>$</prompt> <userinput>./Interact</userinput>
error: exactly two arguments needed
<prompt>$</prompt> <userinput>./Interact hello-in.txt hello-out.txt</userinput>
<prompt>$</prompt> <userinput>cat hello-in.txt</userinput>
hello world
<prompt>$</prompt> <userinput>cat hello-out.txt</userinput>
hello world</screen>

    <para id="x_YC1">Some of the notation in our source file is new.  The &do;
      keyword introduces a block of <emphasis>actions</emphasis> that
      can cause effects in the real world, such as reading or writing
      a file.  The <code>&lt;-</code> operator is the equivalent of
      assignment inside a &do; block.  This is enough explanation to
      get us started.  We will talk in much more detail about these
      details of notation, and I/O in general, in <xref
      linkend="io"/>.</para>

    <para id="x_ZC1">When we want to test a function that cannot talk to the
      outside world, we simply replace the name
      <function>id</function> in the code above with the name of the
      function we want to test.  Whatever our function does, it will
      need to have the type <type>String -&gt; String</type>: in other
      words, it must accept a string, and return a string.</para>
  </sect1>

  <sect1 id="fp.splitlines">
    <title>Warming up: portably splitting lines of text</title>

    <para id="x_Y6">Haskell provides a built-in function,
      <function>lines</function>, that lets us split a text string on
      line boundaries.  It returns a list of strings with line
      termination characters omitted.</para>

    &splitlines.ghci:lines;

    <para id="x_Z6">While <function>lines</function> looks useful, it
      relies on us reading a file in <quote>text mode</quote> in order
      to work.  Text mode is a feature common to many programming
      languages: it provides a special behavior when we read and
      write files on Windows.  When we read a file in text mode, the
      file I/O library translates the line ending sequence
      <code>"\r\n"</code> (carriage return followed by newline) to
      <code>"\n"</code> (newline alone), and it does the reverse when
      we write a file. On Unix-like systems, text mode does not
      perform any translation. As a result of this difference, if we
      read a file on one platform that was written on the other, the
      line endings are likely to become a mess. (Both
      <function>readFile</function> and <function>writeFile</function>
      operate in text mode.)</para>

    &splitlines.ghci:lines.cr;

    <para id="x_a6">The <function>lines</function> function only
      splits on newline characters, leaving carriage returns dangling
      at the ends of lines.  If we read a Windows-generated text
      file on a Linux or Unix box, we'll get trailing carriage returns
      at the end of each line.</para>

    <para id="x_b6">We have comfortably used Python's <quote>universal
	newline</quote> support for years: this transparently handles Unix and
      Windows line ending conventions for us.  We would like to
      provide something similar in Haskell.</para>

    <para id="x_d6">Since we are still early in our career of reading
      Haskell code, we will discuss our Haskell implementation in
      quite some detail.</para>

    &SplitLines.hs:splitLines.type;

    <para id="x_aC1">Our function's type signature indicates that it accepts a
      single string, the contents of a file with some unknown
      line ending convention.  It returns a list of strings,
      representing each line from the file.</para>

    &SplitLines.hs:splitLines;

    <para id="x_bC1">Before we dive into detail, notice first how we have
      organized our code.  We have presented the important pieces of
      code first, keeping the definition of
      <function>isLineTerminator</function> until later. Because we
      have given the helper function a readable name, we can guess
      what it does even before we've read it, which eases the smooth
      <quote>flow</quote> of reading the code.</para>

    <para id="x_e6">The Prelude defines a function named
      <function>break</function> that we can use to partition a list
      into two parts. It takes a function as its first parameter. That
      function must examine an element of the list, and return a
      <type>Bool</type> to indicate whether to break the list at that
      point.  The <function>break</function> function returns a pair,
      which consists of the sublist consumed before the predicate
      returned <code>True</code> (the <emphasis>prefix</emphasis>),
      and the rest of the list (the
      <emphasis>suffix</emphasis>).</para>

    &splitlines.ghci:break;

    <para id="x_g6">Since we only need to match a single carriage
      return or newline at a time, examining one element of the list
      at a time is good enough for our needs.</para>

    <para id="x_cC1">The first equation of <function>splitLines</function>
      indicates that if we match an empty string, we have no further
      work to do.</para>

    <para id="x_h6">In the second equation, we first apply
      <function>break</function> to our input string.  The prefix is
      the substring before a line terminator, and the suffix is the
      remainder of the string.  The suffix will include the line
      terminator, if any is present.</para>

    <para id="x_dC1">The <quote><code>pre :</code></quote> expression tells us
      that we should add the <varname>pre</varname> value to the front
      of the list of lines.  We then use a &case; expression to
      inspect the suffix, so we can decide what to do next.  The
      result of the &case; expression will be used as the second
      argument to the <function>(:)</function> list constructor.</para>

    <para id="x_i6">The first pattern matches a string that begins
      with a carriage return, followed by a newline.  The variable
      <varname>rest</varname> is bound to the remainder of the string.
      The other patterns are similar, so they ought to be
      easy to follow.</para>

    <para id="x_k6">A prose description of a Haskell function isn't
      necessarily easy to follow.  We can gain a better understanding
      by stepping into &ghci;, and oberving the behavior of the
      function in different circumstances.</para>

    <para id="x_l6">Let's start by partitioning a string that doesn't
      contain any line terminators.</para>

    &splitlines.ghci:splitLines.foo;

    <para id="x_m6">Here, our application of
      <function>break</function> never finds a line terminator, so the
      suffix it returns is empty.</para>

    &splitlines.ghci:break.foo;

    <para id="x_n6">The &case; expression in
      <function>splitLines</function> must thus be matching on the
      fourth branch, and we're finished.  What about a slightly more
      interesting case?</para>

    &splitlines.ghci:splitLines.foobar;

    <para id="x_o6">Our first application of
      <function>break</function> gives us a non-empty suffix.</para>

    &splitlines.ghci:break.foobar;

    <para id="x_p6">Because the suffix begins with a carriage return, followed
      by a newline, we match on the first branch of the
      &case; expression.  This gives us
      <varname>pre</varname> bound to <code>"foo"</code>, and
      <varname>suf</varname> bound to <code>"bar"</code>.  We apply
      <function>splitLines</function> recursively, this time on
      <code>"bar"</code> alone.</para>

    &splitlines.ghci:splitLines.bar;

    <para id="x_q6">The result is that we construct a list whose head is
      <code>"foo"</code> and whose tail is
      <code>["bar"]</code>.</para>

    &splitlines.ghci:cons;

    <para id="x_eC1">This sort of experimenting with &ghci; is a helpful way to
      understand and debug the behavior of a piece of code.  It has
      an even more important benefit that is almost accidental in
      nature.  It can be tricky to test complicated code from
      &ghci;, so we will tend to write smaller functions.  This can
      further help the readability of our code.</para>

    <para id="x_fC1">This style of creating and reusing small, powerful pieces of
      code is a fundamental part of functional programming.</para>

    <sect2>
      <title>A line ending conversion program</title>

      <para id="x_gC1">Let's hook our <function>splitLines</function> function
	into the little framework we wrote earlier.  Make a copy of
	the <filename>Interact.hs</filename> source file; let's call
	the new file <filename>FixLines.hs</filename>.  Add the
	<function>splitLines</function> function to the new source
	file.  Since our function must produce a single
	<type>String</type>, we must stitch the list of lines back
	together.  The Prelude provides an
	<function>unlines</function> function that concatenates a list
	of strings, adding a newline to the end of each.</para>

      &SplitLines.hs:fixLines;

      <para id="x_hC1">If we replace the <function>id</function> function with
	<function>fixLines</function>, we can compile an executable
	that will convert a text file to our system's native line
	ending.</para>

    <screen><prompt>$</prompt> <userinput>ghc --make FixLines</userinput>
[1 of 1] Compiling Main             ( FixLines.hs, FixLines.o )
Linking FixLines ...</screen>

      <para id="x_iC1">If you are on a Windows system, find and download a text
	file that was created on a Unix system (for example <ulink
	  url="http://www.gnu.org/licenses/gpl-3.0.txt">gpl-3.0.txt</ulink>). 
	Open it in the standard Notepad text editor.  The lines should
	all run together, making the file almost unreadable.  Process
	the file using the <command>FixLines</command> command you
	just created, and open the output file in Notepad.  The line
	endings should now be fixed up.</para>

      <para id="x_jC1">On Unix-like systems, the standard pagers and editors hide
	Windows line endings.  This makes it more difficult to verify
	that <command>FixLines</command> is actually eliminating
	them.  Here are a few commands that should help.</para>

    <screen><prompt>$</prompt> <userinput>file gpl-3.0.txt</userinput>
gpl-3.0.txt: ASCII English text
<prompt>$</prompt> <userinput>unix2dos gpl-3.0.txt</userinput>
unix2dos: converting file gpl-3.0.txt to DOS format ...
<prompt>$</prompt> <userinput>file gpl-3.0.txt</userinput>
gpl-3.0.txt: ASCII English text, with CRLF line terminators</screen>
    </sect2>
  </sect1>

  <sect1 id="fp.infix">
    <title>Infix functions</title>

    <para id="x_K6">Usually, when we define or apply a function in
      Haskell, we write the name of the function, followed by its
      arguments.  This notation is referred to as
      <emphasis>prefix</emphasis>, because the name of the function
      comes before its arguments.</para>

    <para id="x_Rh">If a function or constructor takes two or more
      arguments, we have the option of using it in
      <emphasis>infix</emphasis> form, where we place it
      <emphasis>between</emphasis> its first and second arguments.
      This allows us to use functions as infix operators.</para>

    <para id="x_L6">To define or apply a function or value constructor
      using infix notation, we enclose its name in backtick characters
      (sometimes known as backquotes).  Here are simple infix
      definitions of a function and a type.</para>

    &Plus.hs:plus;

    <para id="x_M6">Since infix notation is purely a syntactic
    convenience, it does not change a function's behavior.</para>

    &infix.ghci:plus;

    <para id="x_N6">Infix notation can often help readability.  For
      instance, the Prelude defines a function,
      <function>elem</function>, that indicates whether a value is
      present in a list. If we use <function>elem</function> using
      prefix notation, it is fairly easy to read.</para>

    &infix.ghci:prefix;

    <para id="x_Q6">If we switch to infix notation, the code
      becomes even easier to understand. It is now clearer that we're
      checking to see if the value on the left is present in the list
      on the right.</para>

    &infix.ghci:infix;

    <para id="x_kC1">We see a more pronounced improvement with some useful functions from the
      <code>Data.List</code> module.
      The <function>isPrefixOf</function> function tells us if one list
      matches the beginning of another.</para>

    &infix.ghci:isPrefixOf;

    <para id="x_lC1">The <function>isInfixOf</function> and
    <function>isSuffixOf</function> functions match anywhere in a list
    and at its end, respectively.</para>

    &infix.ghci:isInfixOf;

    <para id="x_R6">There is no hard-and-fast rule that dictates when
      you ought to use infix versus prefix notation, although prefix
      notation is far more common.  It's best to choose whichever
      makes your code more readable in a specific situation.</para>

    <note>
      <title>Beware familiar notation in an unfamiliar
	language</title>

      <para id="x_Sh">A few other programming languages use backticks, but in
	spite of the visual similarities, the purpose of backticks in
	Haskell does not remotely resemble their meaning in, for
	example, Perl, Python, or Unix shell scripts.</para>

      <para id="x_S6">The only legal thing we can do with backticks in
	Haskell is wrap them around the name of a function.  We can't,
	for example, use them to enclose a complex expression whose
	value is a function.  It might be convenient if
	we could, but that's not how the language is today.</para>
    </note>
  </sect1>

  <sect1 id="fp.lists">
    <title>Working with lists</title>
    
    <para id="x_r6">As the bread and butter of functional programming, lists
      deserve some serious attention.  The standard prelude defines
      dozens of functions for dealing with lists.  Many of these will
      be indispensable tools, so it's important that we learn them
      early on.</para>

    <para id="x_PL">For better or worse, this section is going to read a bit
      like a <quote>laundry list</quote> of functions.  Why present so
      many functions at once?  These functions are both easy to learn
      and absolutely ubiquitous.  If we don't have this toolbox at our
      fingertips, we'll end up wasting time by reinventing simple
      functions that are already present in the standard libraries.
      So bear with us as we go through the list; the effort you'll
      save will be huge.</para>

    <para id="x_s6">The <code>Data.List</code> module is the <quote>real</quote>
      logical home of all standard list functions. The Prelude merely
      re-exports a large subset of the functions exported by
      <code>Data.List</code>. Several useful functions in
      <code>Data.List</code> are <emphasis>not</emphasis> re-exported
      by the standard prelude.  As we walk through list functions in
      the sections that follow, we will explicitly mention those that
      are only in <code>Data.List</code>.</para>
      
    &ch04.list.ghci:Data.List;

    <para id="x_t6">Because none of these functions is complex or takes more
      than about three lines of Haskell to write, we'll be brief in
      our descriptions of each.  In fact, a quick and useful learning
      exercise is to write a definition of each function after you've
      read about it.</para>

    <sect2 id="fp.lists.basic">
      <title>Basic list manipulation</title>

      <para id="x_v6">The <function>length</function> function tells us how many
	elements are in a list.</para>

      &ch04.list.ghci:length;

      <para id="x_mC1">If you need to determine whether a list is empty, use the
	<function>null</function> function.</para>

      &ch04.list.ghci:null;

      <para id="x_w6">To access the first element of a list, we use the
	<function>head</function> function.</para>

      &ch04.list.ghci:head;

      <para id="x_x6">The converse, <function>tail</function>, returns all
	<emphasis>but</emphasis> the head of a list.</para>

      &ch04.list.ghci:tail;

      <para id="x_y6">Another function, <function>last</function>, returns the
	very last element of a list.</para>

      &ch04.list.ghci:last;

      <para id="x_z6">The converse of <function>last</function> is
	<function>init</function>, which returns a list of all but the
	last element of its input.</para>

      &ch04.list.ghci:init;

      <para id="x_A7">Several of the functions above behave poorly on
	empty lists, so be careful if you don't know whether or not a
	list is empty.  What form does their misbehavior take?</para>
      
      &ch04.list.ghci:head.empty;
    
      <para id="x_nC1">Try each of the above functions in &ghci;.  Which ones
	crash when given an empty list?</para>

    </sect2>

    <sect2 id="fp.lists.safe">
      <title>Safely and sanely working with crashy functions</title>

      <para id="x_B7">When we want to use a function like
	<function>head</function>, where we know that it might blow up
	on us if we pass in an empty list, the temptation might
	initially be strong to check the length of the list before we
	call <function>head</function>.  Let's construct an
	artificial example to illustrate our point.</para>

      &EfficientList.hs:myDumbExample;

      <para id="x_C7">If we're coming from a language like Perl or
	Python, this might seem like a perfectly natural way to write
	this test. Behind the scenes, Python lists are arrays; and
	Perl arrays are, well, arrays.  So they necessarily know how
	long they are, and calling <code>len(foo)</code> or
	<code>scalar(@foo)</code> is a perfectly natural thing to do.
	But as with many other things, it's not a good idea to blindly
	transplant such an assumption into Haskell.</para>

      <para id="x_D7">We've already seen the definition of the list
	algebraic data type many times, and know that a list doesn't
	store its own length explicitly.  Thus, the only way that
	<function>length</function> can operate is to walk the entire
	list.</para>

      <para id="x_E7">Therefore,  when we only care whether or not a
	list is empty, calling <function>length</function> isn't a
	good strategy. It can potentially do a lot more work than we
	want, if the list we're working with is finite.  Since Haskell lets
	us easily create infinite lists, a careless use of
	<function>length</function> may even result in an infinite
	loop.</para>

      <para id="x_F7">A more appropriate function to call here instead
	is <function>null</function>, which runs in constant time.
	Better yet, using <function>null</function> makes our code
	indicate what property of the list we really care about.  Here
	are two improved ways of expressing
	<function>myDumbExample</function>.</para>

      &EfficientList.hs:mySmartExample;
    </sect2>

    <sect2>
      <title>Partial and total functions</title>

      <para id="x_G7">Functions that only have return values defined for a
	subset of valid inputs are called <emphasis>partial</emphasis>
	functions (calling <function>error</function> doesn't qualify
	as returning a value!). We call functions that return valid
	results over their entire input domains
	<emphasis>total</emphasis> functions.</para>

      <para id="x_H7">It's always a good idea to know whether a function you're
	using is partial or total.  Calling a partial function with an
	input that it can't handle is probably the single biggest
	source of straightforward, avoidable bugs in Haskell
	programs.</para>

      <para id="x_I7">Some Haskell programmers go so far as to give partial
	functions names that begin with a prefix such as
	<code>unsafe</code>, so that they can't shoot themselves in
	the foot accidentally.</para>

      <para id="x_J7">It's arguably a deficiency of the standard prelude that
	it defines quite a few <quote>unsafe</quote> partial
	functions, like <function>head</function>, without also
	providing <quote>safe</quote> total equivalents.</para>

    </sect2>

    <sect2>
      <title>More simple list manipulations</title>

      <para id="x_K7">Haskell's name for the <quote>append</quote> function is
	<function>(++)</function>.</para>

      &ch04.list.ghci:append;

      <para id="x_L7">The <function>concat</function> function takes a list of
	lists, all of the same type, and concatenates them
	into a single list.</para>

      &ch04.list.ghci:concat;

      <para id="x_M7">It removes one level of nesting.</para>

      &ch04.list.ghci:concat.multi;

      <para id="x_N7">The <function>reverse</function> function returns the
	elements of a list in reverse order.</para>

      &ch04.list.ghci:reverse;

      <para id="x_O7">For lists of <type>Bool</type>, the
	<function>and</function> and <function>or</function> functions
	generalise their two-argument
	cousins,<function>(&amp;&amp;)</function> and
	<function>(||)</function>, over lists.</para>

      &ch04.list.ghci:and.or;

      <para id="x_P7">They have more useful cousins, <function>all</function>
	and <function>any</function>, which operate on lists of any
	type.  Each one takes a predicate as its first argument;
	<function>all</function> returns <code>True</code> if that
	predicate succeeds on every element of the list, while
	<function>any</function> returns <code>True</code> if the
	predicate succeeds on at least one element of the list.</para>

      &ch04.list.ghci:all.any;

    </sect2>

    <sect2>
      <title>Working with sublists</title>

      <para id="x_Q7">The <function>take</function> function, which we
	already met in <xref linkend="funcstypes.calling"/>, returns a
	sublist consisting of the first <emphasis>k</emphasis>
	elements from a list. Its converse, <function>drop</function>,
	drops <emphasis>k</emphasis> elements from the start of the
	list.</para>

      &ch04.list.ghci:take.drop;

      <para id="x_R7">The <function>splitAt</function> function
	combines the functions of <function>take</function> and
	<function>drop</function>, returning a pair of the input list,
	split at the given index.</para>

      &ch04.list.ghci:splitAt;

      <para id="x_S7">The <function>takeWhile</function> and
	<function>dropWhile</function> functions take predicates:
	<function>takeWhile</function> takes elements from the
	beginning of a list as long as the predicate returns
	<code>True</code>, while <function>dropWhile</function> drops
	elements from the list as long as the predicate returns
	<code>True</code>.</para>
      
      &ch04.list.ghci:takeWhile.dropWhile;

      <para id="x_T7">Just as <function>splitAt</function> <quote>tuples
	  up</quote> the results of <function>take</function> and
	<function>drop</function>, the functions
	<function>break</function> (which we already saw in <xref
	linkend="fp.splitlines"/>) and <function>span</function>
	tuple up the results of <function>takeWhile</function> and
	<function>dropWhile</function>.</para>

      <para id="x_U7">Each function takes a predicate;
	<function>break</function> consumes its input while its
	predicate fails, while <function>span</function> consumes
	while its predicate succeeds.</para>

      &ch04.list.ghci:break.span;

    </sect2>

    <sect2 id="fp.list.search">
      <title>Searching lists</title>

      <para id="x_V7">As we've already seen, the
	<function>elem</function> function indicates whether a value
	is present in a list.  It has a companion function,
	<function>notElem</function>.</para>

      &ch04.list.ghci:elem;
      
      <para id="x_W7">For a more general search, <function>filter</function>
	takes a predicate, and returns every element of the list on
	which the predicate succeeds.</para>

      &ch04.list.ghci:filter;

      <para id="x_X7">In <code>Data.List</code>, three predicates,
	<function>isPrefixOf</function>,
	<function>isInfixOf</function>, and
	<function>isSuffixOf</function>, let us test for the presence
	of sublists within a bigger list.  The easiest way to use them
	is using infix notation.</para>

      <para id="x_Y7">The <function>isPrefixOf</function> function tells us
	whether its left argument matches the beginning of its right
	argument.</para>

      &ch04.list.ghci:isPrefixOf;

      <para id="x_Z7">The <function>isInfixOf</function> function indicates
	whether its left argument is a sublist of its right.</para>

      &ch04.list.ghci:isInfixOf;

      <para id="x_a7">The operation of <function>isSuffixOf</function> shouldn't
	need any explanation.</para>

      &ch04.list.ghci:isSuffixOf;
      
    </sect2>

    <sect2>
      <title>Working with several lists at once</title>

      <para id="x_b7">The <function>zip</function> function takes two lists and
	<quote>zips</quote> them into a single list of pairs.  The
	resulting list is the same length as the shorter of the two
	inputs.</para>

      &ch04.list.ghci:zip;

      <para id="x_c7">More useful is <function>zipWith</function>, which takes
	two lists and applies a function to each pair of elements,
	generating a list that is the same length as the shorter of
	the two.</para>

      &ch04.list.ghci:zipWith;

      <para id="x_d7">Haskell's type system makes it an interesting challenge to
	write functions that take variable numbers of
	arguments<footnote>
	  <para id="x_oC1">Unfortunately, we do not have room to address that
	    challenge in this book.</para>
	</footnote>.  So
	if we want to zip three lists together, we call
	<function>zip3</function> or <function>zipWith3</function>,
	and so on up to <function>zip7</function> and
	<function>zipWith7</function>.</para>
    </sect2>

    <sect2 id="fp.lists.strings">
      <title>Special string-handling functions</title>

      <para id="x_e7">We've already encountered the standard
	<function>lines</function> function in <xref
	linkend="fp.splitlines"/>, and its standard counterpart,
	<function>unlines</function>.  Notice that
	<function>unlines</function> always places a newline on the
	end of its result.</para>

      &ch04.list.ghci:unlines;

      <para id="x_f7">The <function>words</function> function splits an input
	string on any white space.  Its counterpart,
	<function>unwords</function>, uses a single space to join a
	list of words.</para>

      &ch04.list.ghci:words.unwords;
    </sect2>

    <sect2>
      <title>Exercises</title>

      <qandaset defaultlabel="number">
	<qandaentry>
	  <question>
	    <para id="x_g7">Write your own <quote>safe</quote> definitions of
	      the standard partial list functions, but make sure that
	      yours never fail.  As a hint, you might want to consider
	      using the following types.</para>

	    &ch04.exercises.hs:safe;

	  </question>
	</qandaentry>

	<qandaentry>
	  <question>
	    <para id="x_h7">Write a function <function>splitWith</function> that
	      acts similarly to <function>words</function>, but takes
	      a predicate and a list of any type, and splits its input
	      list on every element for which the predicate returns
	      <function>False</function>.</para>

	    &ch04.exercises.hs:splitWith;

	  </question>
	</qandaentry>

	<qandaentry>
	  <question>
	    <para id="x_pC1">Using the command framework from <xref
	    linkend="fp.framework"/>, write a program that prints the
	    first word of each line of its input.</para>
	  </question>
	</qandaentry>

	<qandaentry>
	  <question>
	    <para id="x_qC1">Write a program that transposes the text in a file.
	      For instance, it should convert
	      <code>"hello\nworld\n"</code> to
	      <code>"hw\neo\nlr\nll\nod\n"</code>.</para>
	  </question>
	</qandaentry>
      </qandaset>
    </sect2>
  </sect1>

  <sect1 id="fp.loop">
    <title>How to think about loops</title>

    <para id="x_i7">Unlike traditional languages, Haskell has neither a
      <code>for</code> loop nor a <code>while</code> loop.  If we've
      got a lot of data to process, what do we use instead?  There are
      several possible answers to this question.</para>

    <sect2 id="fp.tailrecursion">
      <title>Explicit recursion</title>

      <para id="x_j7">A straightforward way to make the jump from a language
	that has loops to one that doesn't is to run through a few
	examples, looking at the differences.  Here's a C function
	that takes a string of decimal digits and turns them into an
	integer.</para>

      &intparse.c:as_int;

      <para id="x_k7">Given that Haskell doesn't have any looping constructs,
	how should we think about representing a fairly
	straightforward piece of code like this?</para>

      <para id="x_l7">We don't have to start off by writing a type signature,
	but it helps to remind us of what we're working with.</para>

      &IntParse.hs:type;

      <para id="x_m7">The C code computes the result incrementally as
	it traverses the string; the Haskell code can do the same.
	However, in Haskell, we can express the equivalent of a loop as a
	function.   We'll call ours <function>loop</function> just to
	keep things nice and explicit.</para>

      &IntParse.hs:loop;

      <para id="x_n7">That first parameter to <function>loop</function> is the
	accumulator variable we'll be using.  Passing zero into it is
	equivalent to initialising the <varname>acc</varname> variable
	in C at the beginning of the loop.</para>

      <para id="x_o7">Rather than leap into blazing code, let's think about the
	data we have to work with.  Our familiar <type>String</type>
	is just a synonym for <type>[Char]</type>, a list of
	characters.  The easiest way for us to get the traversal right
	is to think about the structure of a list: it's either empty,
	or a single element followed by the rest of the list.</para>
	
      <para id="x_p7">We can express this structural thinking directly by
	pattern matching on the list type's constructors.  It's often
	handy to think about the easy cases first: here, that means we
	will consider the empty-list case.</para>

      &IntParse.hs:base;

      <para id="x_q7">An empty list doesn't just mean <quote>the input
	  string is empty</quote>; it's also the case we'll encounter
	when we traverse all the way to the end of a non-empty list.
	So we don't want to <quote>error out</quote> if we see an
	empty list.  Instead, we should do something sensible.  Here,
	the sensible thing is to terminate the loop, and return our
	accumulated value.</para>

      <para id="x_r7">The other case we have to consider arises when the input
	list is not empty.  We need to do something with the current
	element of the list, and something with the rest of the
	list.</para>

      &IntParse.hs:inductive;

      <para id="x_s7">We compute a new value for the accumulator, and give it
	the name <varname>acc'</varname>.  We then call the
	<function>loop</function> function again, passing it the
	updated value <varname>acc'</varname> and the rest of the
	input list; this is equivalent to the loop starting another
	round in C.</para>

      <note>
	<title>Single quotes in variable names</title>

	<para id="x_t7">Remember, a single quote is a legal character to use in
	  a Haskell variable name, and is pronounced
	  <quote>prime</quote>.  There's a common idiom in Haskell
	  programs involving a variable, say <varname>foo</varname>,
	  and another variable, say <varname>foo'</varname>.  We can
	  usually assume that <varname>foo'</varname> is somehow
	  related to <varname>foo</varname>.  It's often a new value
	  for <varname>foo</varname>, as in our code above.</para>

	<para id="x_u7">Sometimes we'll see this idiom extended, such
	  as <varname>foo''</varname>.  Since keeping track of the
	  number of single quotes tacked onto the end of a name
	  rapidly becomes tedious, use of more than two in a row is
	  thankfully rare.  Indeed, even one single quote can be easy
	  to miss, which can lead to confusion on the part of readers.
	  It might be better to think of the use of single quotes as a
	  coding convention that you should be able to recognize, and
	  less as one that you should actually follow.</para>
      </note>

      <para id="x_v7">Each time the <function>loop</function> function calls
	itself, it has a new value for the accumulator, and it
	consumes one element of the input list.  Eventually, it's
	going to hit the end of the list, at which time the
	<code>[]</code> pattern will match, and the recursive calls
	will cease.</para>

      <para id="x_w7">How well does this function work?  For positive integers,
	it's perfectly cromulent.</para>

      &intparse.ghci:example;

      <para id="x_x7">But because we were focusing on how to traverse lists, not
	error handling, our poor function misbehaves if we try to feed
	it nonsense.</para>

      &intparse.ghci:bad;

      <para id="x_y7">We'll defer fixing our function's shortcomings to <xref
	  linkend="fp.asInt.fix"/>.</para>

      <para id="x_z7">Because the last thing that <function>loop</function> does
	is simply call itself, it's an example of a tail recursive
	function. There's another common idiom in this code, too.
	Thinking about the structure of the list, and handling the
	empty and non-empty cases separately, is a kind of approach
	called <emphasis>structural recursion</emphasis>.</para>

      <para id="x_A8">We call the non-recursive case (when the list is
	empty) the <emphasis>base case</emphasis> (sometimes the
	<emphasis>terminating case</emphasis>).  We'll see people
	refer to the case where the function calls itself as the
	recursive case (surprise!), or they might give a nod to
	mathematical induction and call it the <emphasis>inductive
	  case</emphasis>.</para>

      <para id="x_B8">As a useful technique, structural recursion is
	not confined to lists; we can use it on other algebraic data
	types, too.  We'll have more to say about it later.</para>

      <note>
	<title>What's the big deal about tail recursion?</title>

	<para id="x_QL">In an imperative language, a loop executes in constant
	  space.  Lacking loops, we use tail recursive functions in
	  Haskell instead.  Normally, a recursive function allocates
	  some space each time it applies itself, so it knows where to
	  return to.</para>

	<para id="x_RL">Clearly, a recursive function would be at a huge
	  disadvantage relative to a loop if it allocated memory for
	  every recursive application: this would require linear space
	  instead of constant space.  However, functional language
	  implementations detect uses of tail recursion, and
	  transform tail recursive calls to run in constant space;
	  this is called <emphasis>tail call
	    optimisation</emphasis>, abbreviated TCO.</para>

	<para id="x_SL">Few imperative language implementations
	  perform TCO; this is why using any kind of ambitiously
	  functional style in an imperative language often leads to
	  memory leaks and poor performance.</para>
      </note>
    </sect2>

    <sect2>
      <title>Transforming every piece of input</title>

      <para id="x_C8">Consider another C function, <function>square</function>,
	which squares every element in an array.</para>

      &map.c:square;

      <para id="x_D8">This contains a straightforward and common kind of loop,
	one that does exactly the same thing to every element of its
	input array.  How might we write this loop in Haskell?</para>

      &Map.hs:square;

      <para id="x_E8">Our <function>square</function> function consists of two
	pattern matching equations.  The first
	<quote>deconstructs</quote> the beginning of a non-empty list,
	to get its head and tail.  It squares the first element, then
	puts that on the front of a new list, which is constructed by
	calling <function>square</function> on the remainder of the
	empty list.   The second equation ensures that
	<function>square</function> halts when it reaches the end of
	the input list.</para>

      <para id="x_F8">The effect of <function>square</function> is to construct
	a new list that's the same length as its input list, with
	every element in the input list substituted with its square in
	the output list.</para>

      <para id="x_G8">Here's another such C loop, one that ensures that every
	letter in a string is converted to uppercase.</para>

      &map.c:uppercase;

      <para id="x_H8">Let's look at a Haskell equivalent.</para>

      &Map.hs:upperCase;

      <para id="x_I8">Here, we're importing the <function>toUpper</function>
	function from the standard <code>Data.Char</code> module,
	which contains lots of useful functions for working with
	<type>Char</type> data.</para>

      <para id="x_J8">Our <function>upperCase</function> function follows a
	similar pattern to our earlier <function>square</function>
	function.  It terminates with an empty list when the input
	list is empty; and when the input isn't empty, it calls
	<function>toUpper</function> on the first element, then
	constructs a new list cell from that and the result of calling
	itself on the rest of the input list.</para>

      <para id="x_K8">These examples follow a common pattern for writing
	recursive functions over lists in Haskell.  The <emphasis>base
	  case</emphasis> handles the situation where our input list
	is empty.  The <emphasis>recursive case</emphasis> deals with
	a non-empty list; it does something with the head of the list,
	and calls itself recursively on the tail.</para>
    </sect2>

    <sect2>
      <title>Mapping over a list</title>

      <para id="x_L8">The <function>square</function> and
	<function>upperCase</function> functions that we just defined
	produce new lists that are the same lengths as their input
	lists, and do only one piece of work per element.  This is
	such a common pattern that Haskell's prelude defines a
	function, <function>map</function>, to make it easier.
	<function>map</function> takes a function, and applies it to
	every element of a list, returning a new list constructed from
	the results of these applications.</para>

      <para id="x_M8">Here are our <function>square</function> and
	<function>upperCase</function> functions rewritten to use
	<function>map</function>.</para>

      &Map.hs:map2;

      <para id="x_N8">This is our first  close look at a function that
	takes another function as its argument.  We can learn a lot
	about what <function>map</function> does by simply inspecting
	its type.</para>

      &ch04.map.ghci:type;

      <para id="x_O8">The signature tells us that <function>map</function> takes
	two arguments.  The first is a function that takes a value of
	one type, <varname role="type">a</varname>, and returns a
	value of another type, <varname role="type">b</varname>.</para>

      <para id="x_P8">Since <function>map</function> takes a function as
	argument, we refer to it as a
	<emphasis>higher-order</emphasis> function.  (In spite of the
	name, there's nothing mysterious about higher-order functions;
	it's just a term for functions that take other functions as
	arguments, or return functions.)</para>

      <para id="x_Q8">Since <function>map</function> abstracts out the pattern
	common to our <function>square</function> and
	<function>upperCase</function> functions so that we can reuse
	it with less boilerplate, we can look at what those functions
	have in common and figure out how to implement it
	ourselves.</para>

      &Map.hs:myMap;

      <note>
	<title>What are those wild cards doing there?</title>

	<para id="x_TL">If you're new to functional programming, the reasons for
	  matching patterns in certain ways won't always be obvious.
	  For example, in the definition of <function>myMap</function>
	  above, the first equation binds the function we're mapping
	  to the variable <varname>f</varname>, but the second uses
	  wild cards for both parameters.  What's going on?</para>

	<para id="x_UL">We use a wild card in place of <varname>f</varname> to
	  indicate that we aren't calling the function
	  <varname>f</varname> on the right hand side of the equation.
	  What about the list parameter?  The list type has two
	  constructors.  We've already matched on the non-empty
	  constructor in the first equation that defines
	  <function>myMap</function>.  By elimination, the constructor
	  in the second equation is necessarily the empty list
	  constructor, so there's no need to perform a match to
	  see what its value really is.</para>

	<para id="x_rC1">As a matter of style, it is fine to use wild cards for
	  well known simple types like lists and <type>Maybe</type>.
	  For more complicated or less familiar types, it can be safer
	  and more readable to name constructors explicitly. </para>
      </note>

      <para id="x_R8">We try out our <function>myMap</function> function to give
	ourselves some assurance that it behaves similarly to the
	standard <function>map</function>.</para>

      &ch04.map.ghci:inuse;

      <para id="x_S8">This pattern of spotting a repeated idiom, then
	abstracting it so we can reuse (and write less!) code, is a
	common aspect of Haskell programming.  While abstraction isn't
	unique to Haskell, higher order functions make it remarkably
	easy.</para>
    </sect2>

    <sect2 id="fp.filter">
      <title>Selecting pieces of input</title>

      <para id="x_T8">Another common operation on a sequence of data
	is to comb through it for elements that satisfy some
	criterion.  Here's a function that walks a list of numbers and
	returns those that are odd. Our code has a recursive case
	that's a bit more complex than our earlier functions: it only
	puts a number in the list it returns if the number is odd.
	Using a guard expresses this nicely.</para>

      &Filter.hs:oddList;

      <para id="x_V8">Let's see that in action.</para>

      &ch04.filter.ghci:oddList;

      <para id="x_W8">Once again, this idiom is so common that the
	Prelude defines a function, <function>filter</function>, which
	we have already introduced.  It removes the need for
	boilerplate code to recurse over the list.</para>

      &ch04.filter.ghci:filter;

      <para id="x_X8">The <function>filter</function> function takes a
	predicate and applies it to every element in its input list,
	returning a list of only those for which the predicate
	evaluates to <code>True</code>.  We'll revisit
	<function>filter</function> again soon, in <xref
	  linkend="fp.foldr.filter"/>.</para>
    </sect2>

    <sect2>
      <title>Computing one answer over a collection</title>

      <para id="x_Z8">Another common thing to do with a collection is
	reduce it to a single value.  A simple example of this is
	summing the values of a list.</para>

      &Sum.hs:mySum;

      <para id="x_a8">Our <function>helper</function> function is tail
	recursive, and uses an accumulator parameter,
	<varname>acc</varname>, to hold the current partial sum of the
	list.  As we already saw with <function>asInt</function>, this
	is a <quote>natural</quote> way to represent a loop in a pure
	functional language.</para>

      <para id="x_b8">For something a little more complicated, let's
	take a look at the Adler-32 checksum.  This is a popular
	checksum algorithm; it concatenates two 16-bit checksums into
	a single 32-bit checksum.  The first checksum is the sum of
	all input bytes, plus one.  The second is the sum of all
	intermediate values of the first checksum.  In each case, the
	sums are computed modulo 65521.  Here's a straightforward,
	unoptimised Java implementation.  (It's safe to skip it if you
	don't read Java.)</para>

      &Adler32.java:Adler32;

      <para id="x_c8">Although Adler-32 is a simple checksum, this
	code isn't particularly easy to read on account of the
	bit-twiddling involved.  Can we do any better with a Haskell
	implementation?</para>

      &Adler32.hs:adler32;

      <para id="x_d8">This code isn't exactly easier to follow than
	the Java code, but let's look at what's going on.  First of
	all, we've introduced some new functions.  The
	<function>shiftL</function> function implements a logical
	shift left; <function>(.&amp;.)</function> provides bitwise
	<quote>and</quote>; and <function>(.|.)</function> provides
	bitwise <quote>or</quote>.</para>

      <para id="x_sC1">Once again, our <function>helper</function> function is
	tail recursive.  We've turned the two variables we updated on
	every loop iteration in Java into accumulator parameters.
	When our recursion terminates on the end of the input list, we
	compute our checksum and return it.</para>

      <para id="x_e8">If we take a step back, we can restructure our
	Haskell <function>adler32</function> to more closely resemble
	our earlier <function>mySum</function> function.  Instead of
	two accumulator parameters, we can use a pair as the
	accumulator.</para>

      &Adler32.hs:adler32_try2;

      <para id="x_f8">Why would we want to make this seemingly
	meaningless structural change?  Because as we've already seen
	with <function>map</function> and <function>filter</function>,
	we can extract the common behavior shared by
	<function>mySum</function> and
	<function>adler32_try2</function> into a higher-order
	function.  We can describe this behavior as <quote>do
	  something to every element of a list, updating an
	  accumulator as we go, and returning the accumulator when
	  we're done</quote>.</para>

      <para id="x_g8">This kind of function is called a
	<emphasis>fold</emphasis>, because it <quote>folds up</quote>
	a list.  There are two kinds of fold over lists,
	<function>foldl</function> for folding from the left (the
	start) and <function>foldr</function> for folding from the
	right (the end).</para>
    </sect2>

    <sect2 id="fp.foldl">
      <title>The left fold</title>

      <para>Here is the definition of <function>foldl</function>.</para>
      &Fold.hs:foldl;

      <para id="x_h8">The <function>foldl</function> function takes a
	<quote>step</quote> function, an initial value for its
	accumulator, and a list.  The <quote>step</quote> takes an
	accumulator and an element from the list, and returns a new
	accumulator value. All <function>foldl</function> does is call
	the <quote>stepper</quote> on the current accumulator and an
	element of the list, and passes the new accumulator value to
	itself recursively to consume the rest of the list.</para>

      <para id="x_i8">We refer to <function>foldl</function> as a <quote>left
	  fold</quote> because it consumes the list from left (the
	head) to right.</para>

      <para id="x_j8">Here's a rewrite of <function>mySum</function> using
	<function>foldl</function>.</para>

      &Sum.hs:foldlSum;

    <para id="x_VL">That local function <function>step</function> just adds two
	numbers, so let's simply use the addition operator instead,
	and eliminate the unnecessary <code>where</code>
	clause.</para>

      &Sum.hs:niceSum;

      <para id="x_k8">Notice how much simpler this code is than our
	original <function>mySum</function>?  We're no longer using
	explicit recursion, because <function>foldl</function> takes
	care of that for us.  We've simplified our problem down to two
	things: what the initial value of the accumulator should be
	(the second parameter to <function>foldl</function>), and how
	to update the accumulator (the <function>(+)</function>
	function).  As an added bonus, our code is now shorter, too,
	which makes it easier to understand.</para>

      <para id="x_WL">Let's take a deeper look at what
	<function>foldl</function> is doing here, by manually writing
	out each step in its evaluation when we call <code>niceSum
	  [1,2,3]</code>.</para>

      &Fold.hs:foldl.expand;

      <para id="x_l8">We can rewrite <function>adler32_try2</function>
	using <function>foldl</function> to let us focus on the
	details that are important.</para>

      &Adler32.hs:adler32_foldl;

      <para id="x_m8">Here, our accumulator is a pair, so the result of
	<function>foldl</function> will be, too. We pull the final
	accumulator apart when <function>foldl</function> returns, and
	bit-twiddle it into a <quote>proper</quote> checksum.</para>
    </sect2>

    <sect2>
      <title>Why use folds, maps, and filters?</title>

      <para id="x_n8">A quick glance reveals that
	<function>adler32_foldl</function> isn't really any shorter
	than <function>adler32_try2</function>.  Why should we use a
	fold in this case?  The advantage here lies in the fact that
	folds are extremely common in Haskell, and they have regular,
	predictable behavior.</para>

      <para id="x_o8">This means that a reader with a little
	experience will have an easier time understanding a use of a
	fold than code that uses explicit recursion.  A fold isn't
	going to produce any surprises, but the behavior of a function
	that recurses explicitly isn't immediately obvious.  Explicit
	recursion requires us to read closely to understand exactly
	what's going on.</para>

      <para id="x_p8">This line of reasoning applies to other
	higher-order library functions, including those we've already
	seen, <function>map</function> and
	<function>filter</function>. Because they're library functions
	with well-defined behavior, we only need to learn what they do
	once, and we'll have an advantage when we need to understand
	any code that uses them.  These improvements in readability
	also carry over to writing code.  Once we start to think with
	higher order functions in mind, we'll produce concise code
	more quickly.</para>
    </sect2>

    <sect2 id="fp.foldr.filter">
      <title>Folding from the right</title>

      <para id="x_x8">The counterpart to <function>foldl</function> is
	<function>foldr</function>, which folds from the right of a
	list.</para>

      &Fold.hs:foldr;

      <para id="x_XL">Let's follow the same manual evaluation process with
	<function>foldr (+) 0 [1,2,3]</function> as we did with
	<function>niceSum</function> in <xref
	  linkend="fp.foldl"/>.</para>

      &Fold.hs:foldr.expand;

      <para id="x_YL">The difference between
	<function>foldl</function> and <function>foldr</function>
	should be clear from looking at where the parentheses and the
	<quote>empty list</quote> elements show up.  With
	<function>foldl</function>, the empty list element is on the
	left, and all the parentheses group to the left.  With
	<function>foldr</function>, the <varname>zero</varname> value
	is on the right, and the parentheses group to the
	right.</para>

      <para id="x_ZL">There is a lovely intuitive explanation of how
	<function>foldr</function> works: it replaces the empty list
	with the <varname>zero</varname> value, and every constructor
	in the list with an application of the step function.</para>

      &Fold.hs:foldr.sub;

      <para id="x_y8">At first glance, <function>foldr</function> might seem
	less useful than <function>foldl</function>: what use is a
	function that folds from the right?  But consider the
	Prelude's <function>filter</function> function, which we last
	encountered in <xref linkend="fp.filter"/>.  If we write
	<function>filter</function> using explicit recursion, it will
	look something like this.</para>

      &Fold.hs:filter;

      <para id="x_z8">Perhaps surprisingly, though, we can write
	<function>filter</function> as a fold, using
	<function>foldr</function>.</para>

      &Fold.hs:myFilter;

      <para id="x_A9">This is the sort of definition that could cause us a
	headache, so let's examine it in a little depth.  Like
	<function>foldl</function>, <function>foldr</function> takes a
	function and a base case (what to do when the input list is
	empty) as arguments.  From reading the type of
	<function>filter</function>, we know that our
	<function>myFilter</function> function must return a list of
	the same type as it consumes, so the base case should be a
	list of this type, and the <function>step</function> helper
	function must return a list.</para>

      <para id="x_B9">Since we know that <function>foldr </function> calls
	<function>step</function> on one element of the input list at
	a time, with the accumulator as its second argument, what
	<function>step</function> does must be quite simple.  If the
	predicate returns <function>True</function>, it pushes that
	element onto the accumulated list; otherwise, it leaves the
	list untouched.</para>

      <para id="x_C9">The class of functions that we can express using
	<function>foldr</function> is called <emphasis>primitive
	  recursive</emphasis>.  A surprisingly large number of list
	manipulation functions are primitive recursive.  For example,
	here's <function>map</function> written in terms of
	<function>foldr</function>.</para>

      &Fold.hs:myMap;

      <para id="x_D9">In fact, we can even write <function>foldl</function>
	using <function>foldr</function>!</para>

      &Fold.hs:myFoldl;

      <tip>
	<title>Understanding foldl in terms of foldr</title>

	<para id="x_E9">If you want to set yourself a solid challenge,
	  try to follow the above definition of
	  <function>foldl</function> using <function>foldr</function>.
	  Be warned: this is not trivial!  You might want to have the
	  following tools at hand: some headache pills and a glass of
	  water, &ghci; (so that you can find out what the
	  <function>id</function> function does), and a pencil and
	  paper.</para>

	<para id="x_aL">You will want to follow the same manual
	  evaluation process as we outlined above to see what
	  <function>foldl</function> and <function>foldr</function>
	  were really doing.  If you get stuck, you may find the task
	  easier after reading <xref linkend="fp.partialapp"/>.</para>
      </tip>

      <para id="x_H9">Returning to our earlier intuitive explanation
	of what <function>foldr</function> does, another useful way to
	think about it is that it <emphasis>transforms</emphasis> its
	input list.  Its first two arguments are <quote>what to do
	  with each head/tail element of the list</quote>, and
	<quote>what to substitute for the end of the
	  list</quote>.</para>

      <para id="x_I9">The <quote>identity</quote> transformation with
	<function>foldr</function> thus replaces the empty list with
	itself, and applies the list constructor to each head/tail
	pair:</para>

      &Fold.hs:identity;

      <para id="x_J9">It transforms a list into a copy of itself.</para>

      &fold.ghci:identity;

      <para id="x_K9">If <function>foldr</function> replaces the end
	of a list with some other value, this gives us another way to
	look at Haskell's list append function,
	<function>(++)</function>.</para>

      &fold.ghci:append.builtin;

      <para id="x_L9">All we have to do to append a list onto another is
	substitute that second list for the end of our first
	list.</para>

      &Fold.hs:append;

      <para id="x_M9">Let's try this out.</para>

      &fold.ghci:append;

      <para id="x_bL">Here, we replace each list constructor with another
	list constructor, but we replace the empty list with the
	list we want to append onto the end of our first list.</para>

      <para id="x_P9">As our extended treatment of folds should
	indicate, the <function>foldr</function> function is nearly as
	important a member of our list-programming toolbox as the more
	basic list functions we saw in <xref
	  linkend="fp.lists"/>. It can consume and produce a list
	incrementally, which makes it useful for writing lazy data
	processing code.</para>
    </sect2>

    <sect2>
      <title>Left folds, laziness, and space leaks</title>

      <para id="x_Q9">To keep our initial discussion simple, we used
	<function>foldl</function> throughout most of this section.
	This is convenient for testing, but we will never use
	<function>foldl</function> in practice.</para>

      <para id="x_tC1">The reason has to do with Haskell's non-strict evaluation.
	If we apply <code>foldl (+) [1,2,3]</code>, it evaluates to
	the expression <code>(((0 + 1) + 2) + 3)</code>.  We can see
	this occur if we revisit the way in which the function gets
	expanded.</para>

      &Fold.hs:foldl.expand.noid;

      <para id="x_uC1">The final expression will not be evaluated to
	<code>6</code> until its value is demanded.  Before it is
	evaluated, it must be stored as a thunk.  Not surprisingly, a
	thunk is more expensive to store than a single number, and the
	more complex the thunked expression, the more space it needs.
	For something cheap like arithmetic, thunking an expresion is
	more computationally expensive than evaluating it immediately.
	We thus end up paying both in space and in time.</para>

      <para id="x_vC1">When &GHC; is evaluating a thunked expression, it uses an
	internal stack to do so.  Because a thunked expression could
	potentially be infinitely large, &GHC; places a fixed limit on
	the maximum size of this stack.  Thanks to this limit, we can
	try a large thunked expression in &ghci; without needing to
	worry that it might consume all of memory.</para>

      &thunky.ghci:sum;

      <para id="x_wC1">From looking at the expansion above, we can surmise that
	this creates a thunk that consists of 1000 integers and 999
	applications of <function>(+)</function>.  That's a lot of
	memory and effort to represent a single number! With a larger
	expression, although the size is still modest, the results are
	more dramatic.</para>
	
      &thunky.ghci:overflow;

      <para id="x_xC1">On small expressions, <function>foldl</function> will work
	correctly but slowly, due to the thunking overhead that it
	incurs. We refer to this invisible thunking as a
	<emphasis>space leak</emphasis>, because our code is operating
	normally, but using far more memory than it should.</para>

      <para id="x_yC1">On larger expressions, code with a space leak will simply
	fail, as above.  A space leak with <code>foldl</code> is a
	classic roadblock for new Haskell programmers. Fortunately,
	this is easy to avoid.</para>

      <para id="x_zC1">The <code>Data.List</code> module defines a function named
	<function>foldl'</function> that is similar to
	<function>foldl</function>, but does not build up thunks.  The
	difference in behavior between the two is immediately
	obvious.</para>

      &thunky.ghci:strict;

      <para id="x_AD1">Due to the thunking behavior of
	<function>foldl</function>, it is wise to avoid this function
	in real programs: even if it doesn't fail outright, it will be
	unnecessarily inefficient. Instead, import
	<code>Data.List</code> and use
	<function>foldl'</function>.</para>
    </sect2>

    <sect2 id="fp.fold.exercises">
      <title>Exercises</title>

      <qandaset defaultlabel="number">
	<qandaentry>
	  <question id="fp.asInt.fix">
	    <para id="x_R9">Use a fold (choosing the appropriate fold will make
	      your code much simpler) to rewrite and improve upon the
	      <function>asInt</function> function from <xref
		linkend="fp.tailrecursion"/>.</para>

	    &ch04.exercises.hs:asInt_fold;

	    <para id="x_S9">Your function should behave as follows.</para>

	    &ch04.exercises.ghci:asInt_fold;

	    <para id="x_T9">Extend your function to handle the following kinds
	      of exceptional conditions by calling
	      <function>error</function>.</para>

	    &ch04.exercises.ghci:asInt_fold.errors;
	  </question>
	</qandaentry>

	<qandaentry>
	  <question>
	    <para id="x_U9">The <function>asInt_fold</function> function uses
	      <function>error</function>, so its callers cannot handle
	      errors.  Rewrite it to fix this problem.</para>

	    &ch04.exercises.hs:asInt_either;
	    &ch04.exercises.ghci:asInt_either;

	  </question>
	</qandaentry>
	<qandaentry>
	  <question>
	    <para id="x_V9">The Prelude function <function>concat</function>
	      concatenates a list of lists into a single list, and has
	      the following type.</para>

	    &ch04.exercises.hs:concat;

	    <para id="x_W9">Write your own definition of
	      <function>concat</function> using
	      <function>foldr</function>.</para>
	  </question>
	</qandaentry>

	<qandaentry>
	  <question>
	    <para id="x_X9">Write your own definition of the standard
	      <function>takeWhile</function> function, first using
	      explicit recursion, then
	      <function>foldr</function>.</para>
	  </question>
	</qandaentry>

	<qandaentry>
	  <question>
	    <para id="x_Z9">The <code>Data.List</code> module defines a
	      function, <function>groupBy</function>, which has the
	      following type.</para>

	    &ch04.exercises.hs:groupBy;

	    <para id="x_a9">Use &ghci; to load the <code>Data.List</code> module
	      and figure out what <function>groupBy</function> does,
	      then write your own implementation using a fold.</para>
	  </question>
	</qandaentry>

	<qandaentry>
	  <question>
	    <para id="x_b9">How many of the following Prelude
	      functions can you rewrite using list folds?</para>

	    <itemizedlist>
	      <listitem>
		<para id="x_BD1"><function>any</function></para>
	      </listitem>
	      <listitem>
		<para id="x_CD1"><function>cycle</function></para>
	      </listitem>
	      <listitem>
		<para id="x_DD1"><function>words</function></para>
	      </listitem>
	      <listitem>
		<para id="x_ED1"><function>unlines</function></para>
	      </listitem>
	    </itemizedlist>

	    <para id="x_FD1">For those functions where you can use either
	      <function>foldl'</function> or
	      <function>foldr</function>, which is more
	      appropriate in each case?</para>
	  </question>
	</qandaentry>
      </qandaset>
    </sect2>

    <sect2>
      <title>Further reading</title>

      <para id="x_c9">The article <citation><biblioref
	    linkend="bib.hutton99"/></citation> is an excellent and
	deep tutorial covering folds. It includes many examples of how
	to use simple, systematic calculation techniques to turn
	functions that use explicit recursion into folds.</para>
    </sect2>
  </sect1>

  <sect1 id="fp.anonymous">
    <title>Anonymous (lambda) functions</title>

    <para id="x_d9">In many of the function definitions we've seen so far, we've
      written short helper functions.</para>

    &Partial.hs:isInAny;

    <para id="x_e9">Haskell lets us write completely anonymous
      functions, which we can use to avoid the need to give names to
      our helper functions.  Anonymous functions are often called
      <quote>lambda</quote> functions, in a nod to their heritage in
      the lambda calculus.  We introduce an anonymous function with a
      backslash character, <code>\</code>, pronounced <emphasis>lambda</emphasis><footnote>
	<para id="x_GD1">The backslash was chosen for its visual
	  resemblance to the Greek letter lambda,
	  <code>&#x03bb;</code>.  Although &GHC; can accept Unicode
	  input, it correctly treats <code>&#x03bb;</code> as a
	  letter, not as a synonym for <code>\</code>.</para>
      </footnote>.  This is followed by the function's
      arguments (which can include patterns), then an arrow
      <code>-&gt;</code> to introduce the function's body.</para>

    <para id="x_f9">Lambdas are most easily illustrated by example.  Here's a
      rewrite of <function>isInAny</function> using an anonymous
      function.</para>

    &Partial.hs:isInAny2;

    <para id="x_g9">We've wrapped the lambda in parentheses here so that Haskell
      can tell where the function body ends.</para>

    <para id="x_h9">Anonymous functions behave in every respect
      identically to functions that have names, but Haskell places a
      few important restrictions on how we can define them.  Most
      importantly, while we can write a normal function using
      multiple clauses containing different patterns and guards, a
      lambda can only have a single clause in its definition.</para>

    <para id="x_i9">The limitation to a single clause restricts how we can use
      patterns in the definition of a lambda.  We'll usually write a
      normal function with several clauses to cover different pattern
      matching possibilities.</para>

    &Lambda.hs:safeHead;

    <para id="x_j9">But as we can't write multiple clauses to define a lambda,
      we must be certain that any patterns we use will match.</para>

    &Lambda.hs:unsafeHead;

    <para id="x_k9">This definition of <function>unsafeHead</function> will
      explode in our faces if we call it with a value on which pattern
      matching fails.</para>

    &lambda.ghci:unsafeHead;

    <para id="x_l9">The definition typechecks, so it will compile, so the error
      will occur at runtime.  The moral of this story is to be careful
      in how you use patterns when defining an anonymous function:
      make sure your patterns can't fail!</para>

    <para id="x_m9">Another thing to notice about the
      <function>isInAny</function> and <function>isInAny2</function>
      functions we showed above is that the first version, using a
      helper function that has a name, is a little easier to read than
      the version that plops an anonymous function into the middle.
      The named helper function doesn't disrupt the
      <quote>flow</quote> of the function in which it's used, and the
      judiciously chosen name gives us a little bit of information
      about what the function is expected to do.</para>

    <para id="x_n9">In contrast, when we run across a lambda in the middle of a
      function body, we have to switch gears and read its definition
      fairly carefully to understand what it does.  To help with
      readability and maintainability, then, we tend to avoid lambdas
      in many situations where we could use them to trim a few
      characters from a function definition.  Very often, we'll use
      a partially applied function instead, resulting in clearer and
      more readable code than either a lambda or an explicit
      function.  Don't know what a partially applied function is yet?
      Read on!</para>

    <para id="x_dL">We don't intend these caveats to suggest that lambdas are
      useless, merely that we ought to be mindful of the potential
      pitfalls when we're thinking of using them.  In later chapters,
      we will see that they are often invaluable as
      <quote>glue</quote>.</para>
  </sect1>

  <sect1 id="fp.partialapp">
    <title>Partial function application and currying</title>

    <para id="x_o9">You may wonder why the <code>-&gt;</code> arrow is
      used for what seems to be two purposes in the type signature of
      a function.</para>

    &ch04.list.ghci:dropWhile;

    <para id="x_p9">It looks like the <code>-&gt;</code> is separating
      the arguments to <function>dropWhile</function> from each other,
      but that it also separates the arguments from the return type.
      But in fact <function>-&gt;</function> has only one meaning: it
      denotes a function that takes an argument of the type on the
      left, and returns a value of the type on the right.</para>

    <para id="x_q9">The implication here is very important: in
      Haskell, <emphasis>all functions take only one
	argument</emphasis>. While <function>dropWhile</function>
      <emphasis>looks</emphasis> like a function that takes two
      arguments, it is actually a function of one argument, which
      returns a function that takes one argument. Here's a perfectly
      valid Haskell expression.</para>

    &ch04.list.ghci:dropWhile.isSpace;

    <para id="x_s9">Well, <emphasis>that</emphasis> looks useful.  The
      value <code>dropWhile isSpace</code> is a function that strips
      leading white space from a string.  How is this useful?  As one
      example, we can use it as an argument to a higher order
      function.</para>

    &ch04.list.ghci:dropWhile.isSpace.use;

    <para id="x_t9">Every time we supply an argument to a function, we can
      <quote>chop</quote> an element off the front of its type
      signature.  Let's take <function>zip3</function> as an example
      to see what we mean; this is a function that zips three lists
      into a list of three-tuples.</para>

    &ch04.list.ghci:zip3;

    <para id="x_u9">If we apply <function>zip3</function> with just
      one argument, we get a function that accepts two arguments.  No
      matter what arguments we supply to this compound function, its
      first argument will always be the fixed value we
      specified.</para>

    &ch04.list.ghci:zip3foo;
    
    <para id="x_v9">When we pass fewer arguments to a function than the function
      can accept, we call this <emphasis>partial
	application</emphasis> of the function: we're applying the
      function to only some of its arguments.</para>

    <para id="x_w9">In the example above, we have a partially applied function,
      <code>zip3 "foo"</code>, and a new function,
      <function>zip3foo</function>.  We can see that the type
      signatures of the two and their behavior are identical.</para>

    <para id="x_x9">This applies just as well if we fix two arguments, giving us
      a function of just one argument.</para>

    &ch04.list.ghci:zip3foobar;

    <para id="x_y9">Partial function application lets us avoid writing
      tiresome throwaway functions.  It's often more useful for this
      purpose than the anonymous functions we introduced in <xref
	linkend="fp.anonymous"/>.  Looking back at the
      <function>isInAny</function> function we defined there, here's
      how we'd use a partially applied function instead of a named
      helper function or a lambda.</para>

    &Partial.hs:isInAny3;

    <para id="x_z9">Here, the expression <code>isInfixOf needle</code> is the
      partially applied function.  We're taking the function
      <function>isInfixOf</function>, and <quote>fixing</quote> its
      first argument to be the <varname>needle</varname> variable from
      our parameter list.  This gives us a partially applied function
      that has exactly the same type and behavior as the helper and
      lambda in our earlier definitions.</para>

    <para id="x_HD1">Partial function application is named
      <emphasis>currying</emphasis>, after the logician Haskell
      Curry (for whom the Haskell language is named).</para>

    <para id="x_eL">As another example of currying in use, let's return to the
      list-summing function we wrote in <xref
	linkend="fp.foldl"/>.</para>

    &Sum.hs:niceSum.noid;

    <para id="x_fL">We don't need to fully apply
      <function>foldl</function>; we can omit the list
      <varname>xs</varname> from both the parameter list and the
      parameters to <function>foldl</function>, and we'll end up with
      a more compact function that has the same type.</para>

    &Sum.hs:nicerSum;

    <sect2>
      <title>Sections</title>

      <para id="x_AA">Haskell provides a handy notational shortcut to let us
	write a partially applied function in infix style.  If
	we enclose an operator in parentheses, we can supply its left
	or right argument inside the parentheses to get a partially
	applied function.  This kind of partial application is called
	a <emphasis>section</emphasis>.</para>

      &partial.ghci:section;

      <para id="x_BA">If we provide the left argument inside the section, then
	calling the resulting function with one argument supplies the
	operator's right argument.  And vice versa.</para>

      <para id="x_CA">Recall that we can wrap a function name in backquotes to
	use it as an infix operator.  This lets us use sections with
	functions.</para>

      &partial.ghci:function;

      <para id="x_DA">The above definition fixes <function>elem</function>'s
	second argument, giving us a function that checks to see
	whether its argument is a lowercase letter.</para>

      &partial.ghci:lower.letter;

      <para id="x_EA">Using this as an argument to
	<function>all</function>, we get a function that checks an
	entire string to see if it's all lowercase.</para>

      &partial.ghci:lower.string;

      <para id="x_ID1">If we use this style, we can further improve the
	readability of our earlier <function>isInAny3</function>
	function.</para>

      &Partial.hs:isInAny4;

    </sect2>
  </sect1>

  <sect1 id="fp.aspattern">
    <title>As-patterns</title>

    <para id="x_FA">Haskell's <function>tails</function> function, in
      the <code>Data.List</code> module, generalises the
      <function>tail</function> function we introduced earlier.
      Instead of returning one <quote>tail</quote> of a list, it
      returns <emphasis>all</emphasis> of them.</para>

    &suffix.ghci:tails;

    <para id="x_GA">Each of these strings is a <emphasis>suffix</emphasis> of
      the initial string, so <function>tails</function> produces a
      list of all suffixes, plus an extra empty list at the
      end.  It always produces that extra empty list, even
      when its input list is empty.</para>

    &suffix.ghci:tails.empty;

    <para id="x_HA">What if we want a function that behaves like
      <function>tails</function>, but which <emphasis>only</emphasis>
      returns the non-empty suffixes?  One possibility would be for us
      to write our own version by hand.  We'll use a new piece of
      notation, the <code>@</code> symbol.</para>

    &SuffixTree.hs:suffixes;

    <para id="x_JA">The pattern <code>xs@(_:xs')</code> is called an
      <emphasis>as-pattern</emphasis>, and it means <quote>bind the
	variable <varname>xs</varname> to the value that matches the
	right side of the <code>@</code> symbol</quote>.</para>

    <para id="x_KA">In our example, if the pattern after the
      <quote>@</quote> matches, <varname>xs</varname> will be bound to
      the entire list that matched, and <varname>xs'</varname> to all
      but the head of the list (we used the wild card <code>_</code>
      pattern to indicate that we're not interested in the value of
      the head of the list).</para>

    &suffix.ghci:suffixes;

    <para id="x_LA">The as-pattern makes our code more readable. To
      see how it helps, let us compare a definition that lacks an
      as-pattern.</para>

      &SuffixTree.hs:noAsPattern;

      <para id="x_MA">Here, the list that we've deconstructed in the pattern
	match just gets put right back together in the body of the
	function.</para>

    <para id="x_NA">As-patterns have a more practical use than simple
      readability: they can help us to share data instead of copying
      it.  In our definition of <function>noAsPattern</function>, when
      we match <code>(x:xs)</code>, we construct a new copy of it in
      the body of our function.  This causes us to allocate a new
      list node at run time.  That may be cheap, but it isn't free.
      In contrast, when we defined <function>suffixes</function>, we
      reused the value <varname>xs</varname> that we matched with our
      as-pattern.  Since we reuse an existing value, we avoid a little
      allocation.</para>
  </sect1>

  <sect1 id="fp.compose">
    <title>Code reuse through composition</title>

    <para id="x_OA">It seems a shame to introduce a new function,
      <function>suffixes</function>, that does almost the same thing
      as the existing <function>tails</function> function.  Surely we
      can do better?</para>

    <para id="x_PA">Recall the <function>init</function> function we
      introduced in <xref linkend="fp.lists"/>: it returns all but
      the last element of a list.</para>

    &SuffixTree.hs:suffixes2;

    <para id="x_QA">This <function>suffixes2</function> function
      behaves identically to <function>suffixes</function>, but it's a
      single line of code.</para>

    &suffix.ghci:suffixes2;

    <para id="x_RA">If we take a step back, we see the glimmer of a
      pattern here: we're applying a function, then applying another
      function to its result.  Let's turn that pattern into a function
      definition.</para>

    &SuffixTree.hs:compose;

    <para id="x_SA">We now have a function,
      <function>compose</function>, that we can use to
      <quote>glue</quote> two other functions together.</para>

    &SuffixTree.hs:suffixes3;

    <para id="x_TA">Haskell's automatic currying lets us drop the
      <varname>xs</varname> variable, so we can make our definition
      even shorter.</para>

    &SuffixTree.hs:suffixes4;

    <para id="x_UA">Fortunately, we don't need to write our own
      <function>compose</function> function.  Plugging functions into
      each other like this is so common that the Prelude provides
      function composition via the <function>(.)</function>
      operator.</para>

    &SuffixTree.hs:suffixes5;

    <para id="x_VA">The <function>(.)</function> operator isn't a
      special piece of language syntax; it's just a normal
      operator.</para>

    &suffix.ghci:types;

    <para id="x_WA">We can create new functions at any time by writing
      chains of composed functions, stitched together with
      <function>(.)</function>, so long (of course) as the result type
      of the function on the right of each <function>(.)</function>
      matches the type of parameter that the function on the left can
      accept.</para>

    <para id="x_JD1">As an example, let's solve a simple puzzle: counting the
      number of words in a string that begin with a capital
      letter.</para>

    &suffix.ghci:dotty;

    <para id="x_KD1">We can understand what this composed function does by
      examining its pieces.  The <function>(.)</function> function is
      right associative, so we will proceed from right to left.</para>

    &suffix.ghci:words.type;

    <para id="x_LD1">The <function>words</function> function has a result type of
      <type>[String]</type>, so whatever is on the left side of
      <function>(.)</function> must accept a compatible
      argument.</para>

    &suffix.ghci:capped.type;

    <para id="x_MD1">This function returns <code>True</code> if a word begins
      with a capital letter (try it in &ghci;), so <code>filter
	(isUpper . head)</code> returns a list of <type>String</type>s
      containing only words that begin with capital letters.</para>

    &suffix.ghci:capfilt.type;

    <para id="x_ND1">Since this expression returns a list, all that remains is
      calculate the length of the list, which we do with another
      composition.</para>

    <para id="x_XA">Here's another example, drawn from a real
      application.  We want to extract a list of macro names from a C
      header file shipped with <code>libpcap</code>, a popular network
      packet filtering library.  The header file contains a large
      number definitions of the following form.</para>

    <programlisting>
#define DLT_EN10MB      1       /* Ethernet (10Mb) */
#define DLT_EN3MB       2       /* Experimental Ethernet (3Mb) */
#define DLT_AX25        3       /* Amateur Radio AX.25 */</programlisting>

    <para id="x_OD1">Our goal is to extract names such as <code>DLT_EN10MB</code>
      and <code>DLT_AX25</code>.</para>

      &dlts.hs:dlts;

    <para id="x_YA">We treat an entire file as a string, split it up
      with <function>lines</function>, then apply <code>foldr step
	[]</code> to the resulting list of lines. The
      <function>step</function> helper function operates on a single
      line.</para>

      &dlts.hs:step;

    <para id="x_ZA">If we match a macro definition with our guard
      expression, we cons the name of the macro onto the head of the
      list we're returning; otherwise, we leave the list
      untouched.</para>

    <para id="x_aA">While the individual functions in the body of
      <function>secondWord</function> are by now familiar to us, it
      can take a little practice to piece together a chain of
      compositions like this.  Let's walk through the
      procedure.</para>

    <para id="x_bA">Once again, we proceed from right to left.  The
      first function is <function>words</function>.</para>

      &dlts.ghci:words;

    <para id="x_cA">We then apply <code>tail</code> to the result of
      <function>words</function>.</para>

      &dlts.ghci:drop1;

    <para id="x_eA">Finally, applying <function>head</function> to the
      result of <code>drop 1 . words</code> will give us the name of
      our macro.</para>

      &dlts.ghci:head.drop1.words;

    <sect2>
      <title>Use your head wisely</title>

      <para id="x_fA">After warning against unsafe list functions in
	  <xref
	    linkend="fp.lists.safe"/>, here we are calling both
	<function>head</function> and <function>tail</function>, two
	of those unsafe list functions.  What gives?</para>

      <para id="x_gA">In this case, we can assure ourselves by
	inspection that we're safe from a runtime failure.  The
	pattern guard in the definition of <function>step</function>
	contains two words, so when we apply
	<function>words</function> to any string that makes it past
	the guard, we'll have a list of at least two elements,
	<code>"#define"</code> and some macro beginning with
	<code>"DLT_"</code>.</para>

      <para id="x_hA">This the kind of reasoning we ought to do to
	convince ourselves that our code won't explode when we call
	partial functions.  Don't forget our earlier admonition:
	calling unsafe functions like this requires care, and can
	often make our code more fragile in subtle ways.  If we for
	some reason modified the pattern guard to only contain one
	word, we could expose ourselves to the possibility of a crash,
	as the body of the function assumes that it will receive two
	words.</para>
    </sect2>
  </sect1>

  <sect1 id="fp.readability">
    <title>Tips for writing readable code</title>

    <para id="x_gL">So far in this chapter, we've come across two tempting
      looking features of Haskell: tail recursion and anonymous
      functions.  As nice as these are, we don't often want to use
      them.</para>

    <para id="x_hL">Many list manipulation operations can be most
      easily expressed using combinations of library functions such as
      <function>map</function>, <function>take</function>, and
      <function>filter</function>.  Without a doubt, it takes some
      practice to get used to using these.  In return for our initial
      investment, we can write and read code more quickly, and with
      fewer bugs.</para>

    <para id="x_iL">The reason for this is simple.  A tail recursive
      function definition has the same problem as a loop in an
      imperative language: it's completely general.  It might perform
      some filtering, some mapping, or who knows what else. We are
      forced to look in detail at the entire definition of the
      function to see what it's really doing.  In contrast,
      <function>map</function> and most other list manipulation
      functions do only <emphasis>one</emphasis> thing.  We can take
      for granted what these simple building blocks do, and focus on
      the idea the code is trying to express, not the minute details
      of how it's manipulating its inputs.</para>

    <para id="x_jL">In the middle ground between tail recursive
      functions (with complete generality) and our toolbox of list
      manipulation functions (each of which does one thing) lie the
      folds.  A fold takes more effort to understand than, say, a
      composition of <function>map</function> and
      <function>filter</function> that does the same thing, but it
      behaves more regularly and predictably than a tail recursive
      function.  As a general rule, don't use a fold if you can
      compose some library functions, but otherwise try to use a fold
      in preference to a hand-rolled a tail recursive loop.</para>

    <para id="x_kL">As for anonymous functions, they tend to interrupt
      the <quote>flow</quote> of reading a piece of code.  It is very
      often as easy to write a local function definition in a
      <code>let</code> or <code>where</code> clause, and use that, as
      it is to put an anonymous function into place.  The relative
      advantages of a named function are twofold: we don't need to
      understand the function's definition when we're reading the code
      that uses it; and a well chosen function name acts as a tiny
      piece of local documentation.</para>
  </sect1>

  <sect1 id="fp.seq">
    <title>Space leaks and strict evaluation</title>

    <para id="x_PD1">The <function>foldl</function> function that we discussed
      earlier is not the only place where space leaks can arise in
      Haskell code.  We will use it to illustrate how non-strict
      evaluation can sometimes be problematic, and how to solve the
      difficulties that can arise.</para>

    <tip>
      <title>Do you need to know all of this right now?</title>

      <para id="x_QD1">It is perfectly reasonable to skip this section until you
	encounter a space leak <quote>in the wild</quote>.  Provided
	you use <function>foldr</function> if you are generating a
	list, and <function>foldl'</function> instead of
	<function>foldl</function> otherwise, space leaks are unlikely
	to bother you in practice for a while.</para>
    </tip>

    <sect2>
      <title>Avoiding space leaks with seq</title>

      <para id="x_RD1">We refer to an expression that is not evaluated lazily as
	<emphasis>strict</emphasis>, so <function>foldl'</function> is
	a strict left fold. It bypasses Haskell's usual non-strict
	evaluation through the use of a special function named
	<function>seq</function>.</para>

      &Fold.hs:strict;

      <para id="x_SD1">This <function>seq</function> function has a peculiar
	type, hinting that it is not playing by the usual
	rules.</para>

      &thunky.ghci:seq;

      <para id="x_TD1">It operates as follows: when a <function>seq</function>
	expression is evaluated, it forces its first argument to be
	evaluated, then returns its second argument.  It doesn't
	actually do anything with the first argument:
	<function>seq</function> exists solely as a way to force that
	value to be evaluated. Let's walk through a brief application
	to see what happens.</para>

      &Fold.hs:step1;

      <para id="x_UD1">This expands as follows.</para>

      &Fold.hs:step2;

      <para id="x_VD1">The use of <function>seq</function> forcibly evaluates
	<varname>new</varname> to <code>3</code>, and returns its
	second argument.</para>

      &Fold.hs:step3;

      <para id="x_WD1">We end up with the following result.</para>

      &Fold.hs:step4;

      <para id="x_XD1">Thanks to <function>seq</function>, there are no thunks in
	sight.</para>
    </sect2>

    <sect2>
      <title>Learning to use seq</title>

      <para id="x_YD1">Without some direction, there is an element of mystery
	to using <function>seq</function> effectively.
	Here are some useful rules for using it well.</para>

      <para id="x_ZD1">To have any effect, a <function>seq</function>
	expression must be the first thing evaluated in an
	expression.</para>

      &Fold.hs:hiddenInside;

      <para id="x_aD1">To strictly evaluate several values, chain
	applications of <function>seq</function> together.</para>

      &Fold.hs:chained;

      <para id="x_bD1">A common mistake is to try to use <function>seq</function>
	with two unrelated expressions.</para>

      &Fold.hs:badExpression;

      <para id="x_cD1">Here, the apparent intention is to evaluate <code>step
	  zero x</code> strictly.  Since the expression is duplicated
	in the body of the function, strictly evaluating the first
	instance of it will have no effect on the second.  The use of
	&let; from the definition of <function>foldl'</function> above
	shows how to achieve this effect correctly.</para>

      <para id="x_dD1">When evaluating an expression, <function>seq</function>
	stops as soon as it reaches a constructor.  For simple types
	like numbers, this means that it will evaluate them
	completely.  Algebraic data types are a different story.
	Consider the value <code>(1+2):(3+4):[]</code>.  If we apply
	<function>seq</function> to this, it will evaluate the
	<code>(1+2)</code> thunk.  Since it will stop when it reaches
	the first <code>(:)</code> constructor, it will have no effect
	on the second thunk.  The same is true for tuples: <code>seq
	  ((1+2),(3+4)) True</code> will do nothing to the thunks
	inside the pair, since it immediately hits the pair's
	constructor.</para>

      <para id="x_eD1">If necessary, we can use normal functional programming
	techniques to work around these limitations.</para>

      &Fold.hs:strictPair;
      
      <para id="x_fD1">It is important to understand that
	<function>seq</function> isn't free: it has to perform a check
	at runtime to see if an expression has been evaluated. Use it
	sparingly.  For instance, while our
	<function>strictPair</function> function evaluates the
	contents of a pair up to the first constructor, it adds the
	overheads of pattern matching, two applications of
	<function>seq</function>, and the construction of a new tuple.
	If we were to measure its performance in the inner loop of a
	benchmark, we might find it to slow the program down.</para>

      <para id="x_gD1">Aside from its performance cost if overused,
	<function>seq</function> is not a miracle cure-all for memory
	consumption problems.  Just because you
	<emphasis>can</emphasis> evaluate something strictly doesn't
	mean you <emphasis>should</emphasis>.  Careless use of
	<function>seq</function> may do nothing at all; move existing
	space leaks around; or introduce new leaks.</para>

      <para id="x_hD1">The best guides to whether <function>seq</function> is
	necessary, and how well it is working, are performance
	measurement and profiling, which we will cover in <xref
	  linkend="profiling"/>.  From a base of empirical
	measurement, you will develop a reliable sense of when
	<function>seq</function> is most useful.</para>
    </sect2>
  </sect1>
</chapter>

<!--
local variables: 
sgml-parent-document: ("00book.xml" "book" "chapter")
end:
-->
