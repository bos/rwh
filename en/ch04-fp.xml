<!-- vim: set filetype=docbkxml shiftwidth=2 autoindent expandtab tw=77 : -->

<chapter id="hs.fp">
  <title>Functional programming</title>

  <sect1>
    <title>How to think about loops</title>

    <para>Unlike traditional languages, Haskell has neither a
      <code>for</code> loop nor a <code>while</code> loop.  If we've
      got a lot of data to process, what do we use instead?  There are
      several possible answers to this question, so let's build up a
      toolbox of answers.</para>

    <sect2>
      <title>Transforming every piece of input</title>

      <para>Consider the C function <function>square</function>, which
	squares every element in an array.</para>

      &map.c:square;

      <para>This contains a straightforward and common kind of loop,
	one that does exactly the same thing to every element of its
	input array.  How might we write this loop in Haskell?</para>

      &Map.hs:square;

      <para>Our <function>square</function> function consists of two
	pattern matching equations.  The first
	<quote>deconstructs</quote> the beginning of a non-empty list,
	to get its head and tail.  It squares the first element, then
	puts that on the front of a new list, which is constructed by
	calling <function>square</function> on the remainder of the
	empty list.   The second equations ensures that
	<function>square</function> halts when it reaches the end of
	the input list.</para>

      <para>The effect of <function>square</function> is to construct
	a new list that's the same length as its input list, with
	every element in the input list substituted with its square in
	the output list.</para>

      <para>Here's another such C loop, one that ensures that every
	letter in a string is converted to uppercase.</para>

      &map.c:uppercase;

      <para>Let's look at a Haskell equivalent.</para>

      &Map.hs:upperCase;

      <para>Here, we're importing the <function>toUpper</function>
	function from the standard <code>Data.Char</code> module,
	which contains lots of useful functions for working with
	<type>Char</type> data.</para>

      <para>Our <function>upperCase</function> function follows a
	similar pattern to our earlier <function>square</function>
	function.  It terminates with an empty list when the input
	list is empty; and when the input isn't empty, it calls
	<function>toUpper</function> on the first element, then
	constructs a new list cell from that and the result of calling
	itself on the rest of the input list.</para>

      <para>These examples follow a common pattern for writing
	recursive functions over lists in Haskell.  The <emphasis>base
	  case</emphasis> handles the situation where our input list
	is empty.  The <emphasis>recursive case</emphasis> deals with
	a non-empty list; it does something with the head of the list,
	and calls itself recursively on the tail.</para>
    </sect2>

    <sect2>
      <title>Mapping over a list</title>

      <para>The <function>square</function> and
	<function>upperCase</function> functions that we just defined
	produce new lists that are the same lengths as their input
	lists, and do only one piece of work per element.  This is
	such a common pattern that Haskell's prelude defines a
	function, <function>map</function>, to make it easier.
	<function>map</function> takes a function, and applies it to
	every element of a list, returning a new list constructed from
	the results of these applications.</para>

      <para>Here are our <function>square</function> and
	<function>upperCase</function> functions rewritten to use
	<function>map</function>.</para>

      &Map.hs:map2;

      <para>This is our first time seeing a function that takes
	another function as its argument.  We can learn a lot about
	what <function>map</function> does by simply inspecting its
	type.</para>

      &ch04.map.ghci:type;

      <para>The signature tells us that <function>map</function> takes
	two arguments.  The first is a function that takes a value of
	one type, <varname role="type">a</varname>, and returns a
	value of another type, <varname role="type">b</varname>.  This
	is the only unfamiliar piece of notation in the type; notice
	the parentheses that surround the signature of the function
	argument so we (and Haskell) won't misread it.</para>

      <para>Since <function>map</function> takes a function as
	argument, we refer to it as a
	<emphasis>higher-order</emphasis> function.  (In spite of the
	name, there's nothing mysterious about higher-order
	functions; it's just a term for functions that take other
	functions as arguments, or return functions.)</para>

      <para>Since <function>map</function> abstracts out the pattern
	common to our <function>square</function> and
	<function>upperCase</function> functions so that we can reuse
	it with less boilerplate, we can look at what those functions
	have in common and figure out how to implement it
	ourselves.</para>

      &Map.hs:myMap;

      <para>We try out our <function>myMap</function> function to give
      outselves some assurance that it behaves similarly to the
	standard <function>map</function>.</para>

      &ch04.map.ghci:inuse;

      <para>This business of seeing that we're repeating an idiom,
	then abstracting it so we can reuse (and write less!) code, is
	a common aspect of Haskell programming.</para>
    </sect2>

    <sect2>
      <title>Selecting pieces of input</title>

      <para>Another common operation on a sequence of data is to comb
	through it for elements that satisfy some criterion.  Here's
	an example in C++ of a function that walks a linked list of
	numbers and returns those that are odd.</para>

      &filter.cpp:oddList;

      <para>Our Haskell equivalent has a recursive case that's a bit
	more complex than our earlier functions: it only puts a number
	in the list it returns if the number is odd.  Using a guard
	expresses this nicely.</para>

      &Filter.hs:oddList;

      <para>Let's see that in action.</para>

      &ch04.filter.ghci:oddList;

      <para>Once again, this idiom is so common that Haskell's prelude
	defines a function, <function>filter</function>, which removes
	the need for boilerplate code to recurse over the list.</para>

      &ch04.filter.ghci:filter;

      <para>The <function>filter</function> function takes a predicate
	(a function that tests an argument and returns a
	<type>Bool</type>) and applies it to every element in its
	input list, returning a list of only those for which the
	predicate evaluates to <code>True</code>.</para>
    </sect2>

    <sect2>
      <title>Computing one answer over a collection</title>

      <para>Another common thing to do with a loop is to <quote>fold
	  it up</quote>.  A simple example of this is summing the
	values of a list.</para>

      &Sum.hs:mySum;

      <para>Our <function>helper</function> function is tail
	recursive, and uses an <emphasis>accumulator</emphasis>
	parameter, <varname>acc</varname>, to hold the current partial
	sum of the list.  This is a <quote>natural</quote> way to
	represent a loop in a pure functional language.</para>

      <para>For something a little more complicated, let's take a look
	at the Adler-32 checksum. Here's a Java implementation.</para>

      &Adler32.java:Adler32;

      <para>Although Adler-32 is a simple checksum, this code isn't
	particularly easy to read on account of the bit-twiddling
	involved.  Can we do any better with a Haskell
	implementation?</para>

      &Adler32.hs:adler32;

      <para>This isn't exactly easier to follow than the Java code,
	but let's look at what's going on.  Once again,
	<function>helper</function> function is tail recursive.  We've
	turned the two variables we updated on every loop iteration in
	Java into accumulator parameters.  When our recursion
	terminates on the end of the input list, we compute our
	checksum and return it.</para>

      <para>If we take a step back, we can restructure our Haskell
	<function>adler32</function> to more closely resemble our
	earlier <function>mySum</function> function.  Instead of two
	accumulator parameters, we can use a single accumulator that's
	a two-tuple.</para>

      &Adler32.hs:adler32_try2;

      <para>Why would we want to make this seemingly meaningless
	structural change?  Because as we've already seen with
	<function>map</function> and <function>filter</function>, we
	can extract the common behaviour shared by
	<function>mySum</function> and
	<function>adler32_try2</function> into a higher-order
	function.  We can describe this behaviour as <quote>do
	  something to every element of a list, updating an
	  accumulator as we go, and returning the accumulator when
	  we're done</quote>.</para>

      <para>This kind of function is called a
	<emphasis>fold</emphasis>, because it <quote>folds up</quote>
	a list, and it has two variants, <function>foldl</function>
	and <function>foldr</function>.</para>
    </sect2>

    <sect2>
      <title>The left fold</title>

      &Fold.hs:foldl;

      <para>The <function>foldl</function> function takes a
	<quote>stepper</quote> function, an initial value for its
	accumulator, and a list.  The <quote>stepper</quote> takes an
	accumulator and an element from the list, and returns a new
	accumulator value. All <function>foldl</function> does is call
	the <quote>stepper</quote> on the current accumulator and an
	element of the list, and passes the new accumulator value to
	itself recursively to consume the rest of the list.</para>

      <para>We refer to <function>foldl</function> as a <quote>left
	  fold</quote> because it consumes the list from left (the
	head) to right.</para>

      <para>Here's a rewrite of <function>mySum</function> using
	<function>foldl</function>.</para>

      &Sum.hs:foldlSum;

      <para>Notice how much simpler this code is?  We're no longer
	using explicit recursion, because <function>foldl</function>
	takes care of that for us.  We've simplified our problem down
	to two things: what the initial value of the accumulator
	should be (the second parameter to
	<function>foldl</function>), and how to update the accumulator
	(the <function>step</function> function).  As an added bonus,
	our code is now shorter, too, which makes it easier to
	understand.</para>

      <para>We can rewrite <function>adler32_try2</function> in a
	similar way, using <function>foldl</function> to let us focus
	on the details that are important.</para>

      &Adler32.hs:adler32_foldl;

      <para>Here, our accumulator is a two-tuple, so the result of
	<function>foldl</function> will be, too. We pull the final
	accumulator apart when <function>foldl</function> returns, and
	bit-twiddle it into a <quote>proper</quote> checksum.</para>
    </sect2>

    <sect2>
      <title>Why use folds, maps, and filters?</title>

      <para>A quick glance reveals that
	<function>adler32_foldl</function> isn't really any shorter
	than <function>adler32_try2</function>.  Why should we use a
	fold in this case?  The advantage here lies in the fact that
	folds are extremely common in Haskell, and they have regular,
	predictable behaviour.</para>

      <para>This means that a reader with a little experience will
	have an easier time understanding a function that uses a fold
	than one that uses explicit recursion.  Where a fold isn't
	going to produce any surprises, the behaviour of a function
	that recurses explicitly isn't immediately obvious.  Explicit
	recursion requires us to read closely to understand exactly
	what's going on.</para>

      <para>This line of reasoning applies to other higher-order
	library functions, including those we've already seen,
	<function>map</function> and <function>filter</function>.
	Because they're library functions with well-defined behaviour,
	we only need to learn what they do once, and we'll have an
	advantage when we need to understand any code that uses
	them.</para>
    </sect2>

    <sect2>
      <title>Folding from the right</title>

      &Fold.hs:foldr;

      <para>The counterpart to <function>foldl</function> is
	<function>foldr</function>, which folds from the right of a
	list.</para>
    </sect2>
  </sect1>

  <sect1 id="hs.fp.rle">
    <title>Example: Run-Length Encoding</title>
    <remark>FIXME:   Example: run-length encoding.  Use to show how
      looping can be done via tail recursion.
    </remark>
  </sect1>

  <sect1 id="hs.fp.inference">
    <title>Type Inference</title>
    <remark>FIXME: Discuss type inference: what it is and how it can
      save a lot of work.
    </remark>
  </sect1>

  <sect1 id="hs.fp.anonymous">
    <title>Anonymous (Lambda) Functions</title>
    <remark>FIXME</remark>
  </sect1>

  <sect1 id="hs.fp.partialapp">
    <title>Curried functions and partial application</title>
    <remark>FIXME</remark>
  </sect1>

  <sect1 id="hs.fp.typeclasses">
    <title>Typeclasses</title>
    <remark>FIXME: Introduce type classes.  Show how ghci infers types
      with constraints. Define some functions that use type class
      constraints. Talk about when it's appropriate to write explicit
      signatures. 
    </remark>
    <para>See also <xref linkend="hs.typeclasses"/>.</para>
  </sect1>

  <sect1 id="hs.fp.mapapi">
    <title>Example: Data.Map API</title>
    <remark>FIXME: Small example would be a finite map data structure
      API, with a list and tree implementation (different complexity,
      same api). Ties together basic types, small functions, top level
      functions. class Map m where new     :: m k v insert  :: k -> v
      -> m k v -> m k v lookup  :: k -> m k v -> v -- simple, O(n)
      data Map1 k v = [(k,v)] -- less simple, O(log n) data Map2 k v =
      Node k v (Map2 k v) (Map2 k v) | Empty

    </remark>
  </sect1>
</chapter>

<!--
local variables: 
sgml-parent-document: ("00book.xml" "chapter")
end:
-->
