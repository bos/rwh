<!-- vim: set filetype=docbkxml shiftwidth=2 autoindent expandtab tw=77 : -->

<chapter id="quickcheck" revision="unpublished">
  <title>Testing and Quality Assurance</title>

  <para id="x_up">
Building real systems means caring about quality control, robustness and 
correctness. With the right quality assurance mechanisms in place, 
well-written code can feel like a precision machine, with all functions
performing their tasks precisely and exactly as specified. There is no
sloppiness around the edges, and the final result can be code that is
self-explanatory, obviously correct -- the kind of code that inspires
confidence.  </para>

  <para id="x_vp">
In Haskell, we have several tools at our disposal for building such 
precise systems. The most obvious tool, and one built into the language
itself, is the expressive type-system, which allows for complicated
invariants to be enforced statically &emdash; making it impossible to write
code violating chosen constraints. In addition, purity and polymorphism
encourage a style of code that is modular, refactorable and testable. This is
the kind of code that just doesn't go wrong.
  </para>

  <para id="x_wp">
Testing plays a key role in keeping code on the straight-and-narrow path.
The main testing mechanisms in Haskell are traditional unit testing (via the HUnit 
library), and its more powerful descendant: type-based <quote>property</quote>
testing, with QuickCheck, an open source testing framework for Haskell. Property-based
testing encourages a high level approach to testing in the form of abstract
invariants functions should satisfy universally, with the actual test data
generated for the programmer by the testing library. In this way code can be
hammered with thousands of tests that would be infeasible to write by hand,
often uncovering subtle corner cases that wouldn't be found otherwise.
  </para>

  <para id="x_xp">
In this chapter we'll look at how to use QuickCheck to establish invariants
in code and then re-examine the pretty printer developed in previous
chapters, testing it with QuickCheck. We'll also see how to guide the testing
process with &GHC;'s code coverage tool: HPC.
  </para>

  <sect1>
    <title>QuickCheck: type-based testing</title>

    <para id="x_yp">
To get an overview of how property-based testing works, we'll begin with a
simple scenario: you've written a specialised sorting function and want to
test its behaviour.
    </para>

    <para id="x_zp">
First, we import the QuickCheck library, and any other modules we need:
    </para>

    &QC-basics.hs:module;

    <para id="x_Aq">
And the function we want to test &emdash; a custom sort routine:
    </para>

    &QC-basics.hs:mysort;

    <para id="x_Bq">
This is the classic Haskell sort implementation: a study in functional
programming elegance, if not efficiency. Now, we'd like to check that this
function obeys the basic rules a good sort should follow. One useful
invariant to start with, and one that comes up in a lot of purely functional
code, is <emphasis>idempotency</emphasis> &emdash; applying a function twice has
the same result as applying it only once. For our sort routine, this should
certainly be true, or things have gone horribly wrong! This invariant can be
encoded as a property simply:
</para>

    &QC-basics.hs:idempotent;

    <para id="x_Cq">
We'll use the QuickCheck convention of prefixing test properties with
<code>prop_</code> to distinguish them from normal code. This idempotency
property is written simply as a Haskell function stating an equality that
must hold for any input data that is sorted. We can check this makes sense
for a few simple cases by hand:
  </para>

    &qc-byhand.ghci:unit;

    <para id="x_oy">
Looking good. However, writing out the input data by hand is tedious, and
violates the moral code of the lazy functional programmer: let the machine do the
work! To automate this the QuickCheck library comes with a set of data
generators for all the basic Haskell data types.  QuickCheck uses the
<type>Arbitrary</type> type class to present a uniform interface to random
data generation with the type system used to resolve which generator to use.
QuickCheck normally hides the data generation plumbing, however, we can also
run the generators by hand to get a sense for the random data QuickCheck
produces. For example, to generate a random list of boolean values:
  </para>

    &qc-arbitrary.ghci:arbitrary;

    <para id="x_py">
QuickCheck generates test data like this and passes it to the property of our
choosing, via the <code>quickCheck</code> function. The type of the property
itself determines which data generator is used. <code>quickCheck</code> then
checks that for all the test data produced, the property is satisifed. 
Now, since our idempotency test is polymorphic in the list element type, we
need to pick a particular type to generate test data for, which we write as a
type constraint on the property. To run the test, we just call
<code>quickCheck</code> with our property function, set to the require data
type:
  </para>

    &qc-basics.ghci:basics;

  <para id="x_Dq">
For the 100 different lists generated, our property held &emdash; great!
When developing tests, it is often useful to see the actual data
generated for each test. To do this, we replace
<code>quickCheck</code> with its sibling, <code>verboseCheck</code>, to see
(noisy) output for each test. Now, let's look at more sophisticated
properties that our function might satisfy.
  </para>

  <sect2>
    <title>Testing for properties</title>

    <para id="x_Eq">
Good libraries consist of a set of orthogonal primitives having sensible
relationships to each other. We can use QuickCheck to specify the
relationships between functions in our code, helping us find a good library
interface by developing a functions that are interrelated via useful
properties. QuickCheck in this way acts as an API "lint" tool &emdash; it
provides machine support for ensuring our library API makes sense.
    </para>

    <para id="x_Fq">
The list sorting function should certainly have a number of interesting
properties that tie it to other list operations.  For example: the first
element in a sorted list should always be the smallest element of the input list.
We might be tempted to specify this intuition in Haskell, using the
<code>List</code> library's <code>minimum</code> function:
    </para>

    &QC-basics.hs:relatives_wrong;

    <para id="x_qy">
Testing this, though, reveals an error:
    </para>

    &qc-wrong1.ghci:relatives_wrong1;

    <para id="x_ry">
The property failed when sorting an empty list &emdash; for which
<code>minimum</code> isn't defined, as we can see from its definition:
    </para>

    &minimum.hs:minimum;

    <para>
So this property will only hold for non-empty lists. QuickCheck, thankfully,
comes with a full property writing embedded language, so we can specify more
precisely our invariants, filtering out values we don't want to consider.
For the empty list case, we really want to say: <emphasis>if</emphasis> the
list is non-empty, <emphasis>then</emphasis> the
first element of the sorted result is the minimum. This is done by using the
<code>(==>)</code> implication function, which filters out invalid data
before running the property:
    </para>

    &QC-basics.hs:relatives_right;

    <para id="x_sy">
The result is quite clean. By separating out the empty list case, we can now
confirm the property does in fact hold:
    </para>

    &qc-right1.ghci:relatives_right1;

<para id="x_ty">
Note that we had to change the type of the property from being a simple
<type>Bool</type> result to the more general <type>Property</type> type
(the property itself is now a function that filters non-empty lists, before
testing them, rather than a simple boolean constant).
</para>

<para id="x_uy">
We can now complete out basic property set for the sort function with
some other invariants that it should satisfy: the last sorted element should
be the largest element; and if we find the smallest element of two different lists,
that should be the first element if we append and sort those lists. These
properties can be stated as:
    </para>

    &QC-basics.hs:relatives;

  </sect2>

  <sect2>
    <title>Testing against a model</title> 

<para id="x_vy">
Another technique for gaining confidence in some code is to test it
against a model implementation. We can tie our implementation of list
sort to the reference sort function in the standard list library, and,
if they behave the same, we gain confidence that our sort does the right
thing.
</para>

    &QC-basics.hs:model;

<para id="x_wy">
This kind of model-based testing is extremely powerful. Often developers will
have a reference implementation or prototype that, while inefficient, is
correct. This can then be kept around and used to ensure optimised production
code conforms to the reference. By building a large suite of these
model-based tests, and running them regularly (on every commit, for example),
we can cheaply ensure the precision of our code. Large Haskell projects often
come bundled with property suites comparable in size to the project itself,
with thousands of invariants tested on every change, keeping the code tied to
the specification, and ensuring it behaves as required.
</para>

<!-- Say more about model based testing? -->

  </sect2>

  </sect1>

  <sect1 id="quickcheck.indepth">
    <title>Testing case study: specifying a pretty printer</title>

    <para>Testing individiual functions for their natural properties is one
      of the basic building blocks that guides development of large systems
      in Haskell.  We'll look now at a more complicated scenario: taking the
      pretty printing library developed in earlier chapters, and building a
      testsuite for it.
    </para>

    <sect2> 
      <title>Generating test data</title>

    <para>
      Recall that the pretty printer is built around the
      <type>Doc</type>, an algebraic data type that represents well-formed
      documents:
    </para>

    &Prettify2.hs:Doc;

    <!-- Talking about data generation -->

    <!-- TODO added an Eq type. Do the readers care? -->
    <para>
     The library itself is implemented as a set of functions that build and
     transform values of this document type, before finally rendering it the
     finished document to a string.
    </para>
     
    <para>
     QuickCheck encourages an approach to testing where the developer
     specifies invariants that should hold for any data we can throw at the
     code. To test the pretty printing library, then, we'll need a source of
     input data. To do tihs, we take advantage of the small combinator suite for building
     random data generation QuickCheck provides, via the
     <type>Arbitrary</type> class. The class provides a function,
     <code>arbitrary</code>, to generate data of each type, and with this we
     can define our data generator for our custom data types.
   <footnote><para>
    The class also defines a method, <code>coarbitrary</code>,
    which given a value of some type, yields a function for new generators.
    We can ignore this for now, as it is only needed for generating random
    values of function type.
  </para></footnote>
  </para>
      
    &Arbitrary.hs:Class;

    <para> 
    One thing to notice is that the generators run in a <type>Gen</type>
    environment: a simple state-passing container used to hide the random
    number generator plumbing happening underneath. As <type>Gen</type>
    is defined as a monad, we can use <code>do</code> syntax to write new
    generators that access the implicit random number source.  To actually
    write generators for our custom type we use any of a set of functions
    defined in the library for introducing new random values and gluing them
    together to build up data structures of the type we're interested in:
  </para>

    &Arbitrary.hs:IntroductionForms;

   <para>
     The function <code>elements</code>, for example, takes a list of values,
     and returns a generator of random values from that list. With this, we
     can start writing generators for simple data types. For example, to write an
     <type>Arbitrary</type> for <type>Bool</type> is just a function that
     picks elements from a list of all the values in the <type>Bool</type>
     type:
  </para>

    &Arbitrary.hs:Instance;

   <para>
     Another approach to data generation is to generate values for one 
     of the basic Haskell types and then translate those values into the
     type you're actually interested in. We could have written the
     <type>Bool</type> instance by generating integer values
     between 0 and 1 instead, using <code>choose</code>, and then mapping
     them onto the booleans:
  </para>

    &Arbitrary2.hs:Instance2;

    <para>For simple <emphasis>sum</emphasis> types, this approach works
      nicely, as the integers map nicely onto the constructors of the data
      type.  For <emphasis>product</emphasis> types (such as structures and
      tuples), we need to instead generate each component of the product
      separately (and recursively for nested types), and then combine the
      components. For example, to generate random pairs of random values:
    </para>

    &Arbitrary.hs:InstanceProduct;

    <!-- approach one, enumerate the constructors -->
    <para>
      So let's now write a generator for  all the different variants of the
      <type>Doc</type> type. We'll start by breaking the problem down, first
      generating random constructors for each type, then, depending on the
      result, the components of each field. The most complicated case are the
      union and concatentation variants. But first we need to write an
      instance for generating random characters &emdash; QuickCheck doesn't
      have a default instance for characters, due to the abundance of
      different text encodings we might want to use for character tests, so
      we'll write our own, and, as we don't care about the actual text
      content of the document, a simple generator of alphabetic characters
      and punctuation will suffice (richer generators are simple extensions
      of this basic approach):
    </para>

    &QC.hs:ArbitraryChar;

    <para>
      With this in place, we can now write an instance for documents, by
      enumating the constructors, and filling the fields in. We choose a 
      random integer to represent which document variant to generate, and
      then dispatch based on the result. To generate concat or union document
      nodes, we just recurse:
    </para>

    &QC.hs:ArbitraryDoc;

    <!-- approach two, use 'oneof' -->

    <para>
      That was fairly straightforward, and we can clean it up some more by
      using the <code>oneof</code> function, to pick between different
      generators in a list (and we can also use the monadic combinator,
      <code>liftM</code> to avoid naming intermediate results from each
      generator):
    </para>

    &QC.hs:ArbitraryDocConcise;

    <para>
      The latter is more concise, just picking between a list of generators,
      but they describe the same data either way. We can check the ouput
      makes sense, by generating a list of random documents:
    </para>

    &arbitrary-doc.ghci:arbitrarydoc;
      
      <para>
        Looking at the output we see a good mix of simple, base cases, and
        some more complicated nested documents. We'll be generating hundreds
        of these each test run, so that should do a pretty good job.  We can
        now write some generic properties for our document functions.
    </para>
  </sect2>

  <sect2>
    <title>Testing document construction</title>

    <para>
      Two of the basic functions on documents are the null document constant, 
      and the append function:
    </para>

    &Prettify2.hs:append;

    <para>
      Together, these should have a nice property: appending or prepending
      the empty list onto a second list, should leave the second list
      unchanged. We can state this invariant as a property:
    </para>

    &QC.hs:prop_empty;

    <para>
      Confirming this is indeed true, and we're underway with our testing:
    </para>

    &qc-test1.ghci:run_prop_empty;

    <para>
      To look at what actual test documents were generated (by substituting
      <code>quickCheck</code> for <code>verboseCheck</code>) it's possible to
      see that there's a good mix of simple cases, and more nested,
      complicated forms being tested.
    </para>

    <!-- do we want to show an example here? -->

    <para>
      Other functions in the API are also simple enough to have their
      behaviour fully described via properties. By doing so we can maintain
      an external, checkable description of the function's behaviour, so
      later changes won't break these basic invariants.
    </para>

    &QC.hs:simple_stuff;

    <para>
     These properties are enough to fully test the structure returned by the
     basic document operators. To test the rest of the library will require
     more work.
    </para>
  </sect2>

  <sect2>
    <title>Using lists as a model</title>

    <para>
      Higher order functions are the basic glue of reusable programming, and
      our pretty printer library is no exception &emdash; a custom fold
      function is used internally to implement both document concatentation
      and interleaving separators between document chunks. The document
      <code>fold</code> takes a list of document pieces, and glues them all
      together with a supplied combining function:
    </para>

    &Prettify2.hs:fold;

    <!-- do we want to get into random function generation with Doc? -->

    <para>
      We can write tests in isolation for specific instances of fold easily.
      Horizontal concatenation of documents, for example, is easy to specify
      by writing a reference implementation on lists:
    </para>

    &QC.hs:hcat;

    <para>
      It is a similar story for <code>punctuate</code>, where we can model
      inserting punctuation with list interspersal (from
      <code>Data.List</code>):
    </para>

    &QC.hs:punctuate_wrong;

    <para>
     While this looks fine, running it reveals a flaw in our reasoning:
    </para>

    <screen>
<prompt>ghci&gt; </prompt><userinput> quickCheck prop_puncutate</userinput>
Falsifiable, after 6 tests:
Empty
[Line,Text "",Line]
    </screen>

    <para>
     The pretty printing  library optimises away redundant empty documents,
     something the model implementation doesn't, so we'll need to augment our
     model to match reality.  First, we can intersperse the punctuation text
     through the document list, then a little loop to clean up the
     <code>Empty</code> documents scattered through, like so:
    </para>

    &QC.hs:punctuate;

    <para>
    Running this in GHCi, we can confirm the result. It is reassuring to have
    the test framework spot the flaws in our reasoning about the code
    &emdash; exactly what we're looking for:
    </para>

    &qc-punctuate.ghci:prop_punctuate;

   </sect2>

   <sect2>
     <title>Putting it altogether</title>

     <!-- TODO more on test scripts -->

   <para>
     We can put all these tests together in a single file, and run them
     simply by using one of QuickCheck's driver functions. Several exist,
     including fancy parallel ones. the basic batch driver is often good
     enough, however. All we need do is set up some default test parameters,
     and then list the functions we want to test:
   </para>

    &Run.hs:testscript;

   <para>
The test script can then be compiled and executed:
   </para>

   <screen>
<prompt>$ </prompt><userinput>ghc --make Run.hs</userinput>
<prompt>$ </prompt><userinput>./Run </userinput>
                 simple : .....                            (1000)
                complex : ..                               (400)
   </screen>

   <para>
     A total of 1400 individual tests were created, which is comforting. We
     can increase the depth easily enough, but to find out exactly how well
     the code is being tested we should turn to the built in code coverage
     tool, HPC, which can state precisely what is going on.
   </para>

   <!-- sort a decent model for the handling of Union -->

 </sect2>
   </sect1>

   <sect1>
     <title>Measuring test coverage with HPC</title>

     <!-- TODO talk about the kind of problems HPC helps us avoid -->

   <para>
    HPC (Haskell Program Coverage) is an extension to the compiler to
    observe what parts of the code were actually executed during a given
    program run. This is useful in the context of testing, as it lets us
    observe precisely which functions, branches and expressions were
    evaluated. The result is precise knowledge about the percent of code
    tested, that's easy to obtain. HPC comes with a simple utility to
    generate useful graphs of program coverage, making it easy to zoom in 
    on weak spots in the testsuite.
   </para>

   <para>
     To obtain test coverage data, all we need to do is add the
     <code>-fhpc</code> flag to the command line, when compiling the tests:
   </para>

   <screen>
    $ ghc -fhpc Run.hs --make -no-recomp
  </screen>

  <para>
    Then run the tests as normal;
  </para>

   <screen>
    $ ./Run
                 simple : .....                            (1000)
                complex : ..                               (400)

   </screen>

  <para>
    During the test run the trace of the program is written to .tix and .mix
    files in the current directory. Afterwards, these files are used by the
    command line tool, <code>hpc</code>, to display various statistics about
    what happened. The basic interface is textual.
    To begin, we can get a summary of the code tested during the run using
    the <code>report</code> flag to <code>hpc</code>. We'll exclude the test
    programs themselves, (using the <code>--exclude</code> flag), so as to
    concentrate only on code in the pretty printer library. 
    Entering the following into the console:
  </para>

   <screen>
    $ hpc report Run --exclude=Main --exclude=QC
     18% expressions used (30/158)
      0% boolean coverage (0/3)
           0% guards (0/3), 3 unevaluated
         100% 'if' conditions (0/0)
         100% qualifiers (0/0)
     23% alternatives used (8/34)
      0% local declarations used (0/4)
     42% top-level declarations used (9/21)
    </screen>

    <para>
      we see that, on the last line, 42% of top level definitions were
      evaluated during the test run. Not too bad for a first attempt.
      As we test more and more functions from the library, this figure will 
      rise. The textual version is useful for a quick summary, but to really 
      see what's going on it is best to look at the marked up output. 
      To generate this, use the <code>markup</code> flag instead:
    </para>

    <screen>
    $ hpc markup Run --exclude=Main --exclude=QC
  </screen>

    <para>
      This will generate one html file for each Haskell source file, and some
      index files. Loading the file <code>hpc_index.html</code> into a 
      browser, we can see some pretty graphs of the code coverage:
    </para>

  <informalfigure>
  <graphic fileref="figs/ch12-hpc-round1.png"/>
  </informalfigure>

<para>
  Not too bad. Clicking through to the pretty module itself, we see the
  actual source of the program, marked up in yellow for code that wasn't
  tested, and in a bold font for code that was:
  </para>

  <informalfigure>
  <graphic fileref="figs/ch12-coverage-screen.png"/>
  </informalfigure>
  
<para>
we forgot to test the <type>Monoid</type> instance, for example, and some of
the more complicated functions. HPC helps keep our testsuite honest.
Let's add a test for the type class instance of <type>Monoid</type>, the
class of types that support appending and empty elements:
</para>

    &QC.hs:monoid_prop;

<para>
Running this property in ghci, to check it is correct:
</para>

    &qc-monoid.ghci:monoid_prop;

<para>
  We can now recompile and run the test driver. It is important to remove
  the old .tix file first though, or an error will occur as HPC tries to
  combine the statistics from separate runs:
</para>

<screen>
  $ ghc -fhpc Run.hs --make -no-recomp
  $ ./Run 
  Hpc failure: inconsistent number of tick boxes
  (perhaps remove Run.tix file?)
  $ rm *.tix
  $ ./Run   
                     simple : .....                            (1000)
                    complex : ...                              (600)
</screen>

<para>
Another two hundred tests were added to the suite, and our coverage 
statistics improves to 52 percent of the code base:
</para>

  <informalfigure>
  <graphic fileref="figs/ch12-hpc-round2.png"/>
  </informalfigure>

<para>
HPC ensures that we're honest in our testing, as anything less than 100% coverage 
will be pointed out in glaring color. In particular, it ensures the programmer
has to think about error cases, and complicated branches with obscure conditions.
That is, it identifies "code smell".
</para>

   <!-- what kind of things can we do with HPC -->

  </sect1>

    <!--

    <para>An issue that comes up when testing with QuickCheck is where 
    to place the properties. Do they live in an external testsuite, or should 
    they be considered part of the module they test? This becomes more of an
    issue when the testsuite needs to break the module abstraction boundaries
    we have in place (for example, we might need access to constructors that
    are normally hidden). For our pretty printer, this means we'll need, for
    testing purposes, to expose the constructors of the Doc type, in order
    for us to generate random document values.
    </para>

    -->

  <!--

  <sect1>
    <title>The awkward testing squad: IO functions and error cases</title>
  -->

</chapter>

<!--

TODO more sectioning.

* Summary:
    - testing is straightforward
    - can leverage types for powerful property-based testing

  -->

<!--
local variables: 
sgml-parent-document: ("00book.xml" "book" "chapter")
end:
-->
