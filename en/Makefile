# Useful targets to know about:
#
# clean - delete all intermediate and end product files
#
# autoid - add autogenerated id attributes to all paragraphs that lack them
#
# web - build all web targets:
#   alpha - build profiled HTML for internal review
#   beta - build profiled HTML for public review
#   html - build unprofiled HTML, i.e. the whole lot
#
# pdf - try to build PDF; often pitifully broken

# Sources.

src-master := 00book.xml
src-files := $(src-master) \
	book-index.xml \
	book-shortcuts.xml \
	auto-snippets.xml \
	bibliography.xml \
	$(wildcard ch*.xml) \
	$(wildcard app*.xml)

src-dirs := $(wildcard ../examples/app[A-Z]* ../examples/ch[0-9][0-9]*)

src-examples := $(foreach d,$(src-dirs),$(wildcard $d/*.c $d/*.cabal $d/*.cpp \
					$d/*.ghci $d/*.hs $d/*.java $d/*.js \
					$d/*.lhs $d/*.py))

src-figs := $(wildcard figs/*.jpg figs/*.png)

obj-web := html
obj-websup := html/support

extras-web-base := \
	$(obj-web)/index.html \
	$(obj-web)/robots.txt \
	$(obj-websup)/form-min.js \
	$(obj-websup)/form.js \
	$(obj-websup)/hsbook.js \
	$(obj-websup)/jquery-min.js \
	$(obj-websup)/jquery.js \
	$(obj-websup)/styles.css

extras-web := $(extras-web-base) $(extras-web-base:%=%.gz)

xml-examples := $(sort $(patsubst %,x/%:*.xml,$(notdir $(src-examples))))

src-ghci := $(filter %.ghci,$(src-examples))

stamp-examples := $(addprefix x/.stamp-,$(notdir $(src-examples)))

# Objects.

obj-pdf := $(src-master:%.xml=%.pdf)
obj-complete := $(obj-web)/complete
obj-alpha := $(obj-web)/alpha
obj-beta := $(obj-web)/beta

# Tools.

runhaskell ?= runghc

xmllint := xmllint
xmllint-opts := --noout --nonet --valid

xmlto := xmlto
xsltproc := xsltproc

xml-path := $(CURDIR):$(CURDIR)/x

xmlto-opts := --skip-validation --searchpath '$(xml-path)'
xsltproc-opts := --nonet --xinclude --path '$(xml-path)'

docbook2pdf := $(shell which docbook-2-pdf 2>/dev/null)

ifeq ($(docbook2pdf),)
xml-to-pdf = $(xmlto) $(xmlto-opts) pdf $(1)
else
xml-to-pdf = SGML_SEARCH_PATH='$(xml-path)' $(docbook2pdf) -D openjade -q \
		-O -V -O paper-size=Letter -s local=printlocal $(1) > /dev/null
endif

# Directories.

system-xsl-dir := $(firstword $(wildcard \
	/usr/share/sgml/docbook/xsl-stylesheets \
	/usr/share/xml/docbook/stylesheet/nwalsh \
	))

ifeq ($(system-xsl-dir),)
$(error add a suitable directory to system-xsl-dir)
endif

# Bletcherousness.

ifneq ($(wildcard /usr/share/sgml/docbook/xml-dtd-4.4-*),)
dtd-dir := $(wildcard /usr/share/sgml/docbook/xml-dtd-4.4-*)
else
ifneq ($(wildcard /usr/share/xml/docbook/schema/dtd/4.4),)
dtd-dir := $(wildcard /usr/share/xml/docbook/schema/dtd/4.4)
else
$(error Do not know where to look for DocBook XML 4.4 DTD)
endif
endif

.PHONY: all
all: valid

.PHONY: all
pdf: tools $(obj-pdf)

xpdf: $(obj-pdf)
	xpdf $(obj-pdf)

$(obj-pdf): .validated-00book.xml $(src-figs)
	$(call xml-to-pdf,$(src-master))

# Positional parameters:
# 1 -> directory to put output in
# 2 -> name of docbook file to process (optional)
define make-html
mkdir -p $(1)
ln -sf ../support/figs $(1)
$(xsltproc) $(xsltproc-opts) -o $(1)/x \
  ../xsl/chunk-stylesheet.xsl $(or $(2),$(src-master))
set -e; for i in $(1)/*.html; do \
  gzip -9 -c $$i > $$i.gz; \
done
endef

# Positional parameters:
# 1 -> name of output file
# 2 -> revision profile to use
define profile-revision
$(xsltproc) $(xsltproc-opts) -o $(1).xml \
  --stringparam profile.revision "$(2)" ../xsl/dtd-profile.xsl $(src-master)
endef

websup: $(extras-web)

web: websup webfigs alpha beta html

webfigs:
	cp -rf figs $(obj-websup)
	cp ../xsl/system-xsl/images/*.png $(obj-websup)/figs
	cp -f ../web/icons/*.png $(obj-websup)/figs
	for i in $(obj-websup)/figs/*-800.png; do \
	  mv $$i $$(echo $$i | sed 's/-800.png/.png/'); \
	done

.PHONY: alpha
alpha: $(obj-alpha)/index.html $(obj-alpha)/.htaccess

$(obj-alpha)/preface.html: .validated-alpha.xml $(wildcard ../xsl/*.xsl)
	$(call make-html,$(obj-alpha),alpha.xml)

indices: .stamp-indices

.stamp-indices: ../web/Index.hs
	$(runhaskell) $<

$(obj-alpha)/index.html: indices $(obj-alpha)/preface.html
	python ../web/texpand.py index.alpha.html.in $@
	gzip -c < $@ > $@.gz

alpha.xml: .validated-00book.xml ../xsl/system-xsl ../xsl/dtd-profile.xsl
	$(call profile-revision,alpha,alpha)

$(obj-alpha)/.htaccess: ../web/alpha.htaccess
	cp $< $@

.PHONY: beta
beta: $(obj-beta)/index.html $(obj-beta)/.htaccess

$(obj-beta)/preface.html: .validated-beta.xml $(wildcard ../xsl/*.xsl)
	$(call make-html,$(obj-beta),beta.xml)

$(obj-beta)/index.html: indices $(obj-beta)/preface.html
	python ../web/texpand.py index.beta.html.in $@
	gzip -c < $@ > $@.gz

beta.xml: .validated-00book.xml ../xsl/system-xsl ../xsl/dtd-profile.xsl
	$(call profile-revision,beta,beta)

$(obj-beta)/.htaccess: ../web/beta.htaccess
	cp $< $@

.PHONY: complete
html: tools $(obj-complete)/index.html $(obj-complete)/.htaccess

$(obj-complete)/preface.html: .validated-00book.xml ../xsl/system-xsl $(wildcard ../xsl/*.xsl)
	$(call make-html,$(obj-complete))

$(obj-complete)/index.html: indices $(obj-complete)/preface.html
	python ../web/texpand.py index.complete.html.in $@
	gzip -c < $@ > $@.gz

$(obj-complete)/.htaccess: ../web/complete.htaccess
	cp $< $@

../xsl/system-xsl: $(system-xsl-dir)
	ln -s $< $@

.PHONY: index
index: xxx-book-index.xml
xxx-book-index.xml: $(src-master) $(chapter-files)
	rm -rf index
	mkdir index
	collateindex.pl -i index -N -o index/index.xml
	docbook-2-html -q -D openjade -O -V -O html-index $(src-master)
	mv 00book-html/HTML.index index/
	rm -r 00book-html
	collateindex.pl -i index -g -o index/index.xml index/HTML.index
	mv index/index.xml book-index.xml
	rm -r index

.PHONY: valid
valid: tools .validated-00book.xml

tools: ../tools/.built

../tools/.built: ../tools/*.hs ../tools/tools.cabal
	$(MAKE) -C ../tools

auto-snippets.xml: $(stamp-examples)
	@mkdir -p x
	@echo '<!-- AUTOMATICALLY GENERATED.  Do not edit. -->' > $@
	@cat $(sort $^) | sort >> $@

.validated-%: % $(src-files)
	$(xmllint) --path '$(dtd-dir):$(xml-path)' $(xmllint-opts) $<
	touch $@

autoid: tools
	../tools/bin/autoid ch*.xml app*.xml
	rename .autoid '' *.autoid

ids: all-ids.dat

all-ids.dat: ../xsl/all-ids.xsl $(src-files)
	$(xsltproc) $(xsltproc-opts) -o $@ ../xsl/all-ids.xsl $(src-master)

clean:
	-$(MAKE) -C ../tools clean
	-rm -f .validated* .stamp-* *-entities.txt $(obj-pdf)
	-rm -rf x html index *.ghci:*.xml
	-rm -f *.aux *.log *.jtex *.tex *.out jadetex.cfg *.fot *.hs:*.xml
	-find . -name "*~" -print0 | xargs -0r rm -f
	-rm -f .stamp-indices index.*.html.in

vpath %.html.in ../web
vpath %.css ../web
vpath %.js ../web/javascript

vpath %.c $(src-dirs)
vpath %.cabal $(src-dirs)
vpath %.cpp $(src-dirs)
vpath %.hs $(src-dirs)
vpath %.java $(src-dirs)
vpath %.js $(src-dirs)
vpath %.lhs $(src-dirs)
vpath %.py $(src-dirs)
vpath %.lhs $(src-dirs)
vpath %.ghci $(src-dirs)

x/.stamp-%.c: %.c
	@mkdir -p x
	../tools/bin/snippets $(CURDIR)/x $< > $@

x/.stamp-%.cabal: %.cabal
	@mkdir -p x
	../tools/bin/snippets $(CURDIR)/x $< > $@

x/.stamp-%.cpp: %.cpp
	@mkdir -p x
	../tools/bin/snippets $(CURDIR)/x $< > $@

x/.stamp-%.hs: %.hs
	@mkdir -p x
	../tools/bin/snippets $(CURDIR)/x $< > $@

x/.stamp-%.java: %.java
	@mkdir -p x
	../tools/bin/snippets $(CURDIR)/x $< > $@

x/.stamp-%.js: %.js
	@mkdir -p x
	../tools/bin/snippets $(CURDIR)/x $< > $@

x/.stamp-%.lhs: %.lhs
	@mkdir -p x
	../tools/bin/snippets $(CURDIR)/x $< > $@

x/.stamp-%.py: %.py
	@mkdir -p x
	../tools/bin/snippets $(CURDIR)/x $< > $@

x/.stamp-%.ghci: %.ghci
	@mkdir -p x
	../tools/bin/ghcisession $(CURDIR)/x $< > $@

$(obj-websup)/%.css: %.css
	@mkdir -p $(dir $@)
	cp $< $@

$(obj-websup)/%.js: %.js
	@mkdir -p $(dir $@)
	cp $< $@

$(obj-web)/%: ../web/%
	@mkdir -p $(dir $@)
	cp $< $@

$(obj-web)/%.html: %.html.in
	@mkdir -p $(dir $@)
	python ../web/texpand.py $< $@

%.gz: %
	gzip -9 -c $< > $@
