<!-- vim: set filetype=docbkxml shiftwidth=2 autoindent expandtab tw=77 : -->

<chapter id="hs.starting">
  <title>Getting Started</title>

  <sect1 id="hs.starting.ghc">
    <title>Your Haskell environment</title>

    <para>There's a number of Haskell implementations available, of
      which two are in wide use.  Hugs 98 is an interpreter that is
      primarily used for teaching.  For real applications, the Glasgow
      Haskell Compiler, or &GHC; as it's usually known, is much more
      popular.</para>

    <para>&GHC; has two complementary components: &ghc;, a compiler
      that generates native code, and &ghci;, an interpreter that can
      run either interactively or in <quote>batch</quote> mode.</para>

    <note>
      <para>When we discuss the package as a whole, we'll refer to it
	as &GHC;.  If we're talking about one or another command,
	we'll mention either &ghc; or &ghci;.</para>
    </note>

    <para>In this book, we assume that you're using at least version
      6.6.1 of &GHC;.  To obtain a copy of &GHC; for your platform,
      visit <ulink url="http://www.haskell.org/ghc/download.html">the
	&GHC; download page</ulink>, and look for the list of binary
      packages.  If you're using Windows or Mac OS X, these binary
      packages are the best ones to use.</para>

    <para>Many Linux distributions, and BSD and other Unix variants,
      make pre-packaged versions of &GHC; available.  Because they are
      built specifically for each environment, these packages are less
      hassle to use than the generic binary packages. You can find a
      list of such packages at the &GHC; <ulink
	url="http://www.haskell.org/ghc/distribution_packages.html">distribution 
	packages</ulink> page.</para>

  </sect1>

  <sect1>
    <title>Installing GHC on your platform</title>

    <para>We are providing the instructions below based on our
      experience installing &GHC; in mid-2007.  Installation
      instructions inevitably become dated quickly; please bear this
      in mind as you read.</para>

    <para>Because &GHC; runs on a large number of platforms, we've
      focused on a handful of the most popular.</para>

    <sect2>
      <title>Windows</title>

      <para>The prebuilt binary packages of &GHC; should work on
	versions of Windows as old as ME, and on all newer versions
	(NT, 2000, XP, and Vista).  We have installed &GHC; 6.6.1
	under Windows XP Service Pack 2; here are the steps we
	followed.</para>

      <note>
	<para>On Windows, &GHC; requires almost 340MB of disk
	  space.</para>
      </note>
  
      <para>Our first step is to visit the &GHC; <ulink
	  url="http://www.haskell.org/ghc/download.html">download
	  page</ulink>, and follow the link to the current stable
	release.  Scroll down to the section entitled <quote>Binary
	  packages</quote>, and then again to the subsection for
	Windows.  Download the installer; in our case, it's named
	<filename>ghc-6.6.1-i386-windows.exe</filename>.</para>

      <informalfigure>
	<graphic fileref="screenshots/win32-download.png"/>
      </informalfigure>

      <para>After the installer has downloaded, double-clicking on it
	starts the installation process.  This simply involves
	stepping through a normal Windows installer wizard.</para>

      <informalfigure>
	<graphic fileref="screenshots/win32-wizard1.png"/>
      </informalfigure>

      <para>Once the installer has finished, the Start Menu's
	<quote>All Programs</quote> submenu should have a &GHC;
	folder, inside of which you'll find an icon that you can
	double-click on to run &ghci;.</para>

      <informalfigure>
	<graphic fileref="screenshots/win32-start-menu.png"/>
      </informalfigure>

      <para>Clicking on the &ghci; icon brings up a normal Windows
	console window, running &ghci;.</para>

      <informalfigure>
	<graphic fileref="screenshots/win32-ghci.png"/>
      </informalfigure>

      <note>
	<para>The &GHC; installer automatically modifies your user
	  account's <envar>PATH</envar> environment variable so that
	  commands like &ghc; will be present in the command shell's
	  search path (i.e. you can type a &GHC; command name without
	  typing its complete path).  This change will not take effect
	  until you log out and back in again.</para>
      </note>
    </sect2>

    <sect2>
      <title>Mac OS X</title>

      <para>Installing &GHC; on Mac OS X takes a few steps.  We have
	installed &GHC; 6.6.1 under Mac OS X 10.4, on an Intel-based
	MacBook.</para>

      <para>Our first step is to visit the &GHC; <ulink
	  url="http://www.haskell.org/ghc/download.html">download
	  page</ulink>, and follow the link to the current stable
	release.  Scroll down to the section entitled <quote>Binary
	  packages</quote>, and then again to the subsection for Mac
	OS X.  There are three components to download.</para>

      <itemizedlist>
	<listitem>
	  <para>The <filename>GNUreadline</filename> framework
	    provides flexible command line editing.</para>
	</listitem>
	<listitem>
	  <para>The <filename>GMP</filename> framework is required for
	    arbitrary-precision integer support.</para>
	</listitem>
	<listitem>
	  <para>The &GHC; package itself.  This will not work unless
	    both of the preceding frameworks are installed.</para>
	</listitem>
      </itemizedlist>

      <remark>FIXME: actual content.</remark>
    </sect2>

    <sect2>
      <title>Ubuntu and Debian Linux</title>
      
      <remark>FIXME: actual content.</remark>
    </sect2>

    <sect2>
      <title>Fedora Linux</title>
      
      <para>&GHC; is packaged for Fedora.  From a shell, all you need
	to do is run <userinput>sudo yum -y install ghc ghc-doc
	  ghc661-prof</userinput>.  The base package, containing the
	&ghc; and &ghci; commands and libraries, is
	<filename>ghc</filename>.  The <filename>ghc-doc</filename>
	package contains the &GHC; user guide, and command and library
	documentation.  The <filename>ghc661-prof</filename> package
	contains profiling-capable versions of the standard libraries
	(note: its version number may have changed by the time you
	read this).</para>

      <para>Once installation has finished, you should be able to run
	&ghci; from the shell immediately.  You won't need to change
	your shell's search path, or set any environment
	variables.</para>
    </sect2>
  </sect1>

  <sect1 id="hs.starting.ghci">
    <title>Getting started with ghci, the interpreter</title>

    <para>The interactive interpreter for &GHC; is a program named
      &ghci;.  It lets you enter and evaluate Haskell expressions, and
      explore modules and type information.</para>

    <para>When we run &ghci;, it displays a startup banner, followed
      by a <prompt>Prelude&gt;</prompt> prompt.</para>

    <screen>
<prompt>$</prompt> <userinput>ghci</userinput>
   ___         ___ _
  / _ \ /\  /\/ __(_)
 / /_\// /_/ / /  | |      GHC Interactive, version 6.6.1, for Haskell 98.
/ /_\\/ __  / /___| |      http://www.haskell.org/ghc/
\____/\/ /_/\____/|_|      Type :? for help.

Loading package base ... linking ... done.
<prompt>Prelude&gt;</prompt>
</screen>

    <note>
      <para>The prompt displayed by &ghci; changes depending on what
	we're doing, and can often grow long enough to leave little
	visual room on a single line for our input.  For brevity, we
	have replaced &ghci;'s default prompts throughout this book
	with the prompt string <prompt>ghci&gt;</prompt>.</para>
    </note>

    <para>We can immediately start typing expressions, to see what
      &ghci; will do with them.  Basic arithmetic works as we'd
      expect.</para>
    
    &basics.ghci:arithmetic;

    <para>&ghci; defines at least one well-known mathematical constant
      for us.</para>

    &basics.ghci:pi;

    <para>But the constants defined are few, as we can see.</para>

    &basics.ghci:e;

    <para>If this <quote>not in scope</quote> error message seems a
      little daunting, don't worry.  All it means is that there is no
      variable defined with the name <varname>e</varname>.</para>

    <para>We can define <varname>e</varname> ourselves; the &let;
      construct allows us to introduce a new variable.</para>

    &basics.ghci:let;

    <para>We can then use our <varname>e</varname> in arithmetic
      expressions.</para>

    &basics.ghci:epipi;

    <remark>FIXME:   How to run ghci, the Haskell interpreter, and evaluate simple
  expressions.  Introduce a few simple built-in data types: numbers,
  lists, strings.
    </remark>
  </sect1>

  <sect1 id="hs.starting.functions">
    <title>Haskell Programs: Source Files and Functions</title>
    <remark>FIXME: What Haskell source files look like.  How to write a simple
  function.  Hey, functions look different from traditional languages!
  How to get ghci to load the source file; using the definitions from
  it.
    </remark>
  </sect1>

  <sect1 id="hs.starting.types">
    <title>Types</title>
    <remark>FIXME: 
  Introduce types.  Use ghci to inspect the types of a few values and
  functions.  Describe what the "->" means.  Note the difference in
  case between the first character of types and functions/values.
  Take the type information ghci gave us; put it in the source file;
  reload.  Notice that ghci is still happy.
    </remark>
  </sect1>
</chapter>


<!--
local variables: 
sgml-parent-document: ("00book.xml" "chapter")
end:
-->
