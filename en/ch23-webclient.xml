<!-- vim: set filetype=docbkxml shiftwidth=2 autoindent expandtab tw=77 : -->

<chapter id="webclient" revision="alpha;beta">
  <title>Extended Example: Web Client Programming</title>
  <para id="x_Xk">
    By this point, you've seen how to interact with a database, parse
    things, and handle errors.  Let's now take this a step farther and
    introduce a web client library to the mix.
  </para>
  <para id="x_Yk">
    We'll develop a real application in this chapter: a podcast
    downloader, or "podcatcher".  The idea of a podcatcher is simple.
    It is given a list of URLs to process.  Downloading each of these
    URLs results in an XML file in the RSS format.
    Inside this XML file, we'll find
    references to URLs for audio files to download.
  </para>
  <para id="x_Zk">
    Podcatchers usually let the user subscribe to podcasts by adding
    RSS URLs to their configuration.  Then, the user can periodically
    run an update operation.  The podcatcher will download the RSS
    documents, examine them for audio file references, and download
    any audio files that haven't already been downloaded on behalf of
    this user.
  </para>
  <tip>
    <para id="x_ak">Users often call the RSS document a podcast or the
    podcast feed, and each individual audio file an episode.
    </para>
  </tip>
  <para id="x_bk">
    To make this happen, we need to have several things:
  </para>
  <itemizedlist>
    <listitem><para id="x_ck">An HTTP client library to download files</para>
    </listitem>
    <listitem><para id="x_dk">An XML parser</para>
    </listitem>
    <listitem><para id="x_ek">A way to specify and persistently store 
        which podcasts we're interested in</para>
    </listitem>
    <listitem><para id="x_fk">A way to persistently store which podcast episodes
    we've already downloaded
      </para>
    </listitem>
  </itemizedlist>

  <para id="x_gk">
    The last two items can be accomodated via a database we'll set up
    using HDBC.  The first two can be accomodated via other library
    modules we'll introduce in this chapter.
  </para>

  <tip>
    <para id="x_hk">The code in this chapter was written specifically for this
    book, but is based off code written for hpodder, an existing
    podcatcher written in Haskell.  hpodder has many more features
    than the examples presented here, which make it too long and
    complex for coverage in this book.  If you are interested in
    studying hpodder, its source code is freely available at <ulink
    url="http://software.complete.org/hpodder"/>.
    </para>
  </tip>

  <para id="x_ik">
    We'll write the code for this chapter in pieces.  Each piece will
    be its own Haskell module.  You'll be able to play with each piece
    by itself in &ghci;.  At the end, we'll write the final code that
    ties everything together into a finished application.  We'll start
    with the basic types we'll need to use.
  </para>

  <sect1 id="webclient.types">
    <title>Basic Types</title>
    <para id="x_jk">
      The first thing to do is have some idea of the basic information
      that will be important to the application.  This will generally
      be information about the podcasts the user is interested in,
      plus information about episodes that we have seen and
      processed.  It's easy enough to change this later if needed, but
      since we'll be importing it just about everywhere, we'll define
      it first.
    </para>
    &PodTypes.hs:all;
    <para id="x_kk">
      We'll be storing this information in a database.  Having a
      unique identifier for both a podcast and an episode makes it
      easy to find which episodes belong to a particular podcast, load
      information for a particular podcast or episode, or handle
      future cases such as changing URLs for podcasts.
    </para>
  </sect1>
  
  <sect1 id="webclient.db">
    <title>The Database</title>
    <para id="x_lk">
      Next, we'll write the code to make possible persistent storage
      in a database.  We'll primarily be interested in moving data
      between the Haskell structures we defined in
      <literal>PodTypes.hs</literal> and the database on disk.  Also,
      the first time the user runs the program, we'll need to create
      the database tables that we'll use to store our data.
    </para>
    <para id="x_mk">
      We'll use HDBC (see <xref linkend="databases"/>) to interact
      with a Sqlite database.  Sqlite is lightweight and
      self-contained, which makes is perfect for this project.  For
      information on installing HDBC and Sqlite, consult <xref
      linkend="databases.hdbc.install"/>.
    </para>
    &PodDB.hs:all;
    <para id="x_hv">  
      In the <literal>PodDB</literal> module, we have defined
      functions to connect to the database, create the needed database
      tables, add data to the database, query the database, and remove
      data from the database.  Here is an example &ghci; session
      demonstrating interacting with the database.  It will create a
      database file named <literal>poddbtest.db</literal> in the
      current working directory and add a podcast and an episode to it.
    </para>
    &PodDB.ghci:all;
  </sect1>

  <sect1 id="webclient.parser">
    <title>The Parser</title>
    <para id="x_iv">
      Now that we have the database component, we need to have code to
      parse the podcast feeds.  These are XML files that contain
      various information.  Here's an example XML file to show you
      what they look like:

    </para>
    <programlisting><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:itunes="http://www.itunes.com/DTDs/Podcast-1.0.dtd" version="2.0">
  <channel>
    <title>Haskell Radio</title>
    <link>http://www.example.com/radio/</link>
    <description>Description of this podcast</description>
    <item>
      <title>Episode 2: Lambdas</title>
      <link>http://www.example.com/radio/lambdas</link>
      <enclosure url="http://www.example.com/radio/lambdas.mp3"
       type="audio/mpeg" length="10485760"/>
    </item>
    <item>
      <title>Episode 1: Parsec</title>
      <link>http://www.example.com/radio/parsec</link>
      <enclosure url="http://www.example.com/radio/parsec.mp3"
       type="audio/mpeg" length="10485150"/>
    </item>
  </channel>
</rss>
]]></programlisting>

    <para id="x_jv">
      Out of these files, we are mainly interested in two things: the
      podcast title and the enclosure URLs.   We use the <ulink
      url="http://www.cs.york.ac.uk/fp/HaXml/">HaXml toolkit</ulink>
      to parse the XML file.  Here's the source code for this component:
    </para>
    &PodParser.hs:all;
    <para id="x_kv">
      Let's look at this code.  First, we declare two types:
      <literal>PodItem</literal> and <literal>Feed</literal>.  We will be
      transforming the XML document into a <literal>Feed</literal>,
      which then contains items.  We also provide a function to
      convert an <literal>PodItem</literal> into an
      <literal>Episode</literal> as defined in
      <literal>PodTypes.hs</literal>.
    </para>
    <para id="x_lv">
      Next, it os on to parsing.  The <literal>parse</literal>
      function takes a &String; represeting the XML content as well as
      a name, and returns a <literal>Feed</literal>.
    </para>
    <para id="x_mv">
      HaXml is designed as a "filter" converting data of one type to
      another.  It can be a simple straightforward conversion of XML
      to XML, or of XML to Haskell data, or of Haskell data to XML.
      HaXml has a data type called <literal>CFilter</literal>, which
      is defined like this:
    </para>
    <programlisting>
type CFilter = Content -> [Content]
    </programlisting>
    <para id="x_nv">
      That is, a <literal>CFilter</literal> takes a fragment of an XML
      document and returns 0 or more fragments.  A
      <literal>CFilter</literal> might be asked to file all children
      of a specified tag, all tags with a certain name, the literal
      text contained within a part of an XML document, or any of a
      number of other things.  There is also an operator
      <literal>(/>)</literal> that chains <literal>CFilter</literal>
      functions together.  All of the data that we're interested in
      occurs within the <literal>&lt;channel&gt;</literal> tag, so
      first we want to get at that.  We define a simple
      <literal>CFilter</literal>:
    </para>
    <programlisting>
channel = tag "rss" /> tag "channel"
    </programlisting>
    <para id="x_ov">
      When we pass a document to <literal>channel</literal>, it will
      search the top level for the tag named <literal>rss</literal>.
      Then, within that, it will look for the
      <literal>channel</literal> tag.
    </para>
    <para id="x_pv">
      The rest of the program follows this basic approach.
      <literal>txt</literal> extracts the literal text from a tag, and
      by using <literal>CFilter</literal> functions, we can get at any
      part of the document.
    </para>
  </sect1>

  <sect1 id="webclient.download">
    <title>Downloading</title>
    <para id="x_qv">
      The next part of our program is a module to download data.
      We'll need to download two different types of data: the content
      of a podcast, and the audio for each episode.  In the former
      case, we'll parse the data and update our database.  For the
      latter, we'll write the data out to a file on disk.
    </para>
    <para id="x_rv">
      We'll be downloading from HTTP servers, so we'll use a Haskell
      <ulink url="http://www.haskell.org/http/">HTTP library</ulink>.
      For downloading podcast feeds, we'll download the document,
      parse it, and update the database.  For episode audio, we'll
      download the file, write it to disk, and mark it downloaded in
      the database.  Here's the code:
    </para>
    &PodDownload.hs:all;
    <para id="x_sv">
      This module defines three functions:
      <literal>downloadURL</literal>, which simply downloads a URL and
      returns it as a &String;;
      <literal>updatePodcastFromFeed</literal>, which downloads an XML
      feed file, parses it, and updates the database; and
      <literal>getEpisode</literal>, which downloads a given episode
      and marks it done in the database.
    </para>
    <warning>
      <para id="x_tv">
        The HTTP library used here does not read the HTTP result
        lazily.  As a result, it can result in the consumption of a
        large amount of RAM when downloading large files such as
        podcasts.  Other libraries are available that do not have this
        limitation.  We used this one because it is stable, easy to
        install, and reasonably easy to use.  We suggest mini-http,
        available from Hackage, for serious HTTP needs.
      </para>
    </warning>
  </sect1>

  <sect1 id="webclient.main">
    <title>Main Program</title>
    <para id="x_uv">
      Finally, we need a main program to tie it all together.  Here's
      our main module:
    </para>
    &PodMain.hs:all;
    <para id="x_vv">
      We have a very simple command-line parser with a function to
      indicate a command-line syntax error, plus small functions to
      handle the different command-line arguments.
    </para>
    <para id="x_wv">
      You can compile this program with a command like this:
    </para>
    <programlisting>
ghc --make -O2 -o pod -package HTTP -package HaXml -package network \
    -package HDBC -package HDBC-sqlite3 PodMain.hs
    </programlisting>
    <para id="x_xv">
      Alternatively, you could use a Cabal file as documented in
      <remark>FIXME: insert ref</remark> to build this project:
    </para>
    <programlisting>
-- ch23/pod.cabal
Name: pod
Version: 1.0.0
Build-type: Simple
Build-Depends: HTTP, HaXml, network, HDBC, HDBC-sqlite3, base

Executable: pod
Main-Is: PodMain.hs
GHC-Options: -O2
    </programlisting>
    <para id="x_yv">
      Also, you'll want a simple <literal>Setup.hs</literal> file:
    </para>
    <programlisting>
import Distribution.Simple
main = defaultMain
    </programlisting>
    <para id="x_zv">
      Now, to build with Cabal, you just run:
    </para>
    <programlisting>
runghc Setup.hs configure
runghc Setup.hs build
    </programlisting>
    <para id="x_Aw">
      And you'll find a <literal>dist</literal> directory containing
      your output.  To install the program system-wide, run
      <literal>runghc Setup.hs install</literal>.
    </para>
  </sect1>
    
</chapter>

<!--
local variables: 
sgml-parent-document: ("00book.xml" "book" "chapter")
end:
-->
